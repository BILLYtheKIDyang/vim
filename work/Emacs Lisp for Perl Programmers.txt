                        Emacs Lisp for Perl Programmers

   -----------------------------------------------------------------------------
   |                |        Perl         |             Emacs Lisp             |
   |----------------+---------------------+------------------------------------|
   |Forcing variable|use strict;          |No equivalent.                      |
   |declarations.   |                     |A typo in a variable name, silently |
   |                |                     |creates a new global with default   |
   |                |                     |value of nil.                       |
   |----------------+---------------------+------------------------------------|
   |Global variables|our $global="initial |(defvar global "initial definition" |
   |                |definition";         |   "A global variable for doing     |
   |                |                     |stuff globally.")                   |
   |                |                     |                                    |
   |                |                     |(defcustom user_parameter "default  |
   |                |                     |setting"                            |
   |                |                     |   "Change this if you disagree with|
   |                |                     |my default, fool")                  |
   |----------------+---------------------+------------------------------------|
   |Dynamic scoping |{ local $variable1 = |(let ( (variable1 "hey")            |
   |                |"hey";               |        (variable2 "ho")            |
   |                |  local $variable2 = |    ))                              |
   |                |"ho";                |                                    |
   |                | }                   |Or the less surprising:             |
   |                |                     |                                    |
   |                |                     |(let* (  (variable1 "hey")          |
   |                |                     |          (variable2 "ho")          |
   |                |                     |          (variable3 variable2)     |
   |                |                     |    ))                              |
   |----------------+---------------------+------------------------------------|
   |Lexical scoping |{ my $lexical_dis =  |(require 'cl)                       |
   |                |1;                   |(lexical-let ((lexical-dis 1)       |
   |                |  my $lexical_luthor |                  (lexical-luthor   |
   |                |= 2;                 |2))                                 |
   |                |  ...                |   ...                              |
   |                | }                   |)                                   |
   |----------------+---------------------+------------------------------------|
   |Subroutine with |=item times_2        |(defun times_2 (input)              |
   |explicit return |                     |       "An inane expample that      |
   |                |An inane example that|multiplies by 2."                   |
   |                |multiples by 2.      |    (let* ((output * 2 input))      |
   |                |                     |       output))                     |
   |                |=cut                 |                                    |
   |                |                     |                                    |
   |                |sub times_2 {        |                                    |
   |                |    my $input =      |                                    |
   |                |shift;               |                                    |
   |                |    my $output = 2 * |                                    |
   |                |$input;              |                                    |
   |                |    return $output   |                                    |
   |                |}                    |                                    |
   |----------------+---------------------+------------------------------------|
   |Basic output    |print STDERR "A      |(message "A message for the user")  |
   |                |message for the      |(insert "Some of the real output")  |
   |                |user\n";             |                                    |
   |                |print STDOUT "Some of|                                    |
   |                |the real output\n";  |                                    |
   |----------------+---------------------+------------------------------------|
   |Formatted       |$output =            |(setq output                        |
   |strings         |    sprintf("%s      |(format "%s occurs %d times" string |
   |                |occurs %d times",    |number))                            |
   |                |$string, $number);   |                                    |
   |                |                     |Note: message does an implicit      |
   |                |                     |"format":                           |
   |                |                     |(message "%s occurs %d times" string|
   |                |                     |number)                             |
   |----------------+---------------------+------------------------------------|
   |Assignment      |$variable = "stuff"; |(setq variable "stuff")             |
   |                |                     |(set 'variable "stuff")             |
   |----------------+---------------------+------------------------------------|
   |Assign to a     |our $variable =      |(let* (  (variable  "what")         |
   |variable        |"what";              |           (indirect                |
   |indirectly      |our $indirect =      | 'variable) )  ; Note *single* quote|
   |                |"variable";          |   (set indirect "hey")             |
   |                |{ no strict "refs";  |   (message "well, %s" variable))   |
   |                |  ${ $indirect } =   |;; prints "well, hey"               |
   |                |"hey";               |                                    |
   |                |  print "well,       |A difference from perl: we can't    |
   |                |$variable \n";       |just use the variable name quoted as|
   |                | }                   |a string, in elisp, indirect        |
   |                |## prints "well, hey"|assignment requires a variable's    |
   |                |                     |symbol (hence the use of the        |
   |                |                     |single-quote).                      |
   |----------------+---------------------+------------------------------------|
   |Quoting a String|'quotation'          |"quotation"                         |
   |----------------+---------------------+------------------------------------|
   |Interpolated    |"Eat my $madlibs,    |No real equivalent in elisp (no     |
   |quotes          |okay?"               |sigils).                            |
   |                |                     |This works for environment          |
   |                |                     |variables:                          |
   |                |                     |  (setq script-location             |
   |                |                     |     (substitute-in-file-name       |
   |                |                     |"$HOME/bin"))                       |
   |----------------+---------------------+------------------------------------|
   |String          |$newstring = "Eat my"|(setq newstring                     |
   |concatenation   |. $madlibs . ",      |    (concat "Eat my" madlibs ",     |
   |                |okay?";              |okay?"))                            |
   |----------------+---------------------+------------------------------------|
   |String length   |$len = length(       |(setq len (length stringy))         |
   |                |$stringy );          |                                    |
   |----------------+---------------------+------------------------------------|
   |Length of an    |$len = scalar( @items|(setq len (length items)) ;;        |
   |array/list      |);                   |something elisp got right           |
   |                |    or               |                                    |
   |                |$len = $#items + 1;  |                                    |
   |----------------+---------------------+------------------------------------|
   |Error messages  |Undefined subroutine |Symbol's definition as function is  |
   |                |&main:: ... called   |void: ...                           |
   |                |                     |                                    |
   |                |Global symbol " ... "|Symbol's value as variable is void: |
   |                |requires explicit    |...                                 |
   |                |package name         |                                    |
   |                |                     |Wrong type argument: commandp, ...  |
   |                |bash: ... Permission |(You forgot the "(interactive)".)   |
   |                |denied               |                                    |
   |                |(You forgot to make  |                                    |
   |                |it "executable".)    |                                    |
   |----------------+---------------------+------------------------------------|
   |Evaluating code |$code = "somefunc(   |(setq code '(somefunc (car (cdr     |
   |stored in a     |$blah[2] );"         |blah))))                            |
   |variable:       |eval $code;          |(eval code)                         |
   |                |                     |                                    |
   |                |                     |Note: Single quote delays           |
   |                |                     |evaluation.                         |
   |                |                     |                                    |
   |                |                     |A more exact parallel, with the code|
   |                |                     |in the form of a string:            |
   |                |                     |(setq code-string "(somefunc (car   |
   |                |                     |(cdr blah)))")                      |
   |                |                     |(eval (read code-string)            |
   |----------------+---------------------+------------------------------------|
   |Trapping errors |use Carp;            |(condition-case nil                 |
   |                |eval {               |       (setq ratio (/ a b))         |
   |                |     my $ratio = $a /|     (error                         |
   |                |$b;                  |       (message "Problem with       |
   |                |}                    |integer divide of %s by %s"         |
   |                |if ($@) {            |         (pp-to-string a)           |
   |                |     carp "Problem   |         (pp-to-string b))))        |
   |                |with ratio of $a and |                                    |
   |                |$b: $@";             |                                    |
   |                |}                    |                                    |
   |----------------+---------------------+------------------------------------|
   |Closures        |A perl closure       |None in elisp                       |
   |                |example              |                                    |
   |----------------+---------------------+------------------------------------|
   |repeat/untill   |use Term::ReadKey;   |  (setq message = "Please input the |
   |                |$message = "Please   |name: )                             |
   |                |input the name: ";   |  (setq default-location            |
   |                |do {{                |        (file-name-as-directory     |
   |                |    print $message,  |default-location))                  |
   |                |"\n";                |  (while (progn                     |
   |                |    $name =          |           (setq filename           |
   |                |ReadLine(0);         |                 (expand-file-name  |
   |                |    chomp($name);    |                  (read-file-name   |
   |                |   $message = "Not   |message default-location)))         |
   |                |valid, try again: "; |           (setq message            |
   |                |   }} until (not (-e |                 "Not valid, try    |
   |                |$name))              |again: " )                          |
   |                |                     |           (file-exists-p           |
   |                |                     |filename)))                         |
   |                |                     |;; note: that's an empty while loop,|
   |                |                     |all the code is in the conditional  |
   |----------------+---------------------+------------------------------------|
   |Conditionals    |if ( is_first_time ) | (if (first-time-p)                 |
   |                |{                    |        (progn ;; needed to glue    |
   |                |    print STDERR     |together multi-line then clause     |
   |                |"This is the FIRST   |             (message "This is the  |
   |                |time.";              |FIRST time.")                       |
   |                |    print "we use    |             (insert "we use this   |
   |                |this string the FIRST|string the FIRST time.")            |
   |                |time.";              |             (insert "\n"))         |
   |                | } else {            |      ;; the else clause has an     |
   |                |    print STDERR     |"implicit progn"                    |
   |                |"This is the SECOND  |      (message "This is the SECOND  |
   |                |time.";              |time")                              |
   |                |    print "we use    |      (insert "we use this string   |
   |                |this string the      |the SECOND time.")                  |
   |                |SECOND time.";       |      (insert "\n"))                |
   |                | }                   |                                    |
   |----------------+---------------------+------------------------------------|
   |                |elsif                |No elisp equivalent, but see "cond" |
   |                |                     |below...                            |
   |----------------+---------------------+------------------------------------|
   |case statement  |use 5.10.0;          |(cond ((string-match "something"    |
   |                |use feature "switch";|test_this)                          |
   |                |my $test_this =      |       (message "case 1"))          |
   |                |"something else";    |      ((string= test_this "case two |
   |                |given ( $test_this ) |string")                            |
   |                |{                    |       (message "case 2"))          |
   |                |    when             |      (t                            |
   |                |( /something/ )      |       (message "default")))        |
   |                |       {  print "case|                                    |
   |                |1"  }                |                                    |
   |                |    when ( "case two |                                    |
   |                |string" )            |                                    |
   |                |       {  print "case|                                    |
   |                |2"  }                |                                    |
   |                |    default          |                                    |
   |                |       {  print      |                                    |
   |                |"default"  }         |                                    |
   |                |};                   |                                    |
   |----------------+---------------------+------------------------------------|
   |logical         |( $DEBUG ) and print |(and debug_flag (message "Problem!")|
   |operators for   |STDERR "Problem!\n"; |                                    |
   |short-circuit/  |                     |(or (...) (...))                    |
   |lazy evaluation |close $fh or die;    |                                    |
   |----------------+---------------------+------------------------------------|
   |For each item in|foreach $item        |(require 'cl)                       |
   |a list, do      |( @item_list ) {     |(dolist (item item-list)            |
   |something       |   ...               |  ...)                              |
   |                | }                   |                                    |
   |                |                     |Alternately:                        |
   |                |                     |(mapc                               |
   |                |                     | (lambda (item)                     |
   |                |                     |  ...                               |
   |                |                     |  ) item-list)                      |
   |----------------+---------------------+------------------------------------|
   |Do something to |@new-list =          |(setq new-list                      |
   |each item in a  |   map {             |  (mapcar 'some-func item-list))    |
   |list            |some_func( $_ )  }   |                                    |
   |                |@item_list;          |                                    |
   |----------------+---------------------+------------------------------------|
   |Do something to |my @new_list = map { |(setq temp-list                     |
   |each item in a  |"Prefix: $_"  }      |   (mapcar (lambda (item)           |
   |list (part II)  |( "AAA", "BBB",      |     (concat "Prefix: " item))      |
   |                |"CCC" );             |      '("AAA" "BBB" "CCC")))        |
   |                |Result:              |Result:                             |
   |                |  ('Prefix: AAA',    |   ("Prefix: AAA" "Prefix: BBB"     |
   |                |'Prefix: BBB',       |"Prefix: CCC")                      |
   |                |'Prefix: CCC');      |                                    |
   |----------------+---------------------+------------------------------------|
   |Splitting a     |@directory_levels =  |(setq directory-levels-list         |
   |string          |split m{ / }x,       |(split-string filename "[/]" ))     |
   |                |$filename;           |                                    |
   |                |                     |;; even more perlish (it has a limit|
   |                |                     |parameter)                          |
   |                |                     |(require 'dired-aux)                |
   |                |                     |(setq limit 4)                      |
   |                |                     |(setq octets                        |
   |                |                     |     (dired-split "[\\.]" ip-address|
   |                |                     |limit))                             |
   |----------------+---------------------+------------------------------------|
   |Joining strings |join(  "/",          |(mapconcat 'identity                |
   |                |@directory-levels )  |directory-levels "/")               |
   |                |                     |  ;; Note: identity is the way to do|
   |                |                     |nothing                             |
   |----------------+---------------------+------------------------------------|
   |Regexps:        |(this|that)          |\(this\|that\)                      |
   |                |                     |                                    |
   |                |$pattern =           |(setq pattern                       |
   |                |"<\s*(.*?)\s*>";     |"<[  \t]*\\(.*?\\)[  \t]*>")        |
   |                |                     |  ;; Note \( gets a second slash,   |
   |                |                     |but \t does not                     |
   |----------------+---------------------+------------------------------------|
   |String matching:|undef $/;            |(set-buffer some-stuff)             |
   |Perl defaults to|$_ = <>;             |(if (re-search-forward pattern nil  |
   |$_ and emacs to |m{  $pattern  }xms;  |t) ;; uses current buffer           |
   |the current     |$first_capture = $1; |    (setq first-capture             |
   |buffer          |                     |(match-string 1)))                  |
   |                |                     |   ;; match-string defaults to match|
   |                |                     |data from current buffer.           |
   |----------------+---------------------+------------------------------------|
   |Matching inside |if(  $some_string =~ |(string-match pattern some-string)  |
   |a given string  |m{  $pattern  }x  ) {|(setq first_capture (match-string 1 |
   |                |    $first_capture = |some-string))                       |
   |                |$1;                  |   ;; need to use string name again |
   |                |}                    |with match-string                   |
   |----------------+---------------------+------------------------------------|
   |Making a global |$string =~           |(setq string                        |
   |change          |s/TAG/current        |    (replace-regexp-in-string "TAG" |
   |                |value/g;             |"current value" string)             |
   |                |                     |                                    |
   |                |                     |Alternately, working in the current |
   |                |                     |buffer:                             |
   |                |                     |                                    |
   |                |                     |(while (re-search-forward "TAG" nil |
   |                |                     |t)                                  |
   |                |                     |    (replace-match "current value"  |
   |                |                     |nil nil))                           |
   |----------------+---------------------+------------------------------------|
   |comparison      |( $num1 == $num2 )   |(= num1 num2)                       |
   |operators       |( $str1 eq $str2 )   |(string= str1 str2)                 |
   |                |                     |                                    |
   |                |( $ref1 eq $ref2 ) # |(eq emacs_object1 emacs_object2) ;; |
   |                |identical reference (|same object                         |
   |                |== would work too)   |                                    |
   |                |                     |(if (equal structure1 structure2)   |
   |                |use Data::Compare; # |    ( ... )                         |
   |                |Note: CPAN module,   |                                    |
   |                |not core             |                                    |
   |                |if( Compare(  $ref1, |                                    |
   |                |$ref2  ) ){          |                                    |
   |                |    ...              |                                    |
   |                |}                    |                                    |
   |----------------+---------------------+------------------------------------|
   |Natural data    |arrays and hashes    |lists and alists (and hashes. and   |
   |structures      |                     |property lists. and...) Note: alists|
   |                |                     |are ordered hashes with slow look-up|
   |                |                     |times.                              |
   |                |                     |I talk about this some more: over   |
   |                |                     |here.                               |
   -----------------+---------------------+-------------------------------------
