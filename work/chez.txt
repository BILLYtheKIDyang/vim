'obj
#'template
#%variable
#,@template
#,template
#`template
#2%variable
#3%variable
$system
&assertion
&condition
&continuation
&error
&format
&i/o
&i/o-decoding
&i/o-encoding
&i/o-file-already-exists
&i/o-file-does-not-exist
&i/o-file-is-read-only
&i/o-file-protection
&i/o-filename
&i/o-invalid-position
&i/o-port
&i/o-read
&i/o-write
&implementation-restriction
&irritants
&lexical
&message
&no-infinities
&no-nans
&non-continuable
&serious
&source
&syntax
&undefined
&violation
&warning
&who
(-1+ num)
(- num)
(- num1 num2 num3 ...)
($primitive 2 variable)
($primitive 3 variable)
($primitive variable)
(* num ...)
(/ num)
(/ num1 num2 num3 ...)
(+ num ...)
(<= real1 real2 real3 ...)
(< real1 real2 real3 ...)
(= num1 num2 num3 ...)
(>= real1 real2 real3 ...)
(> real1 real2 real3 ...)
(1- num)
(1+ num)
(abort)
(abort obj)
(abs real)
(acosh num)
(acos num)
(add-duration! time timed)
(add-duration time timed)
(add1 num)
(alias id1 id2)
(andmap procedure list1 list2 ...)
(and expr ...)
(angle num)
(annotation-expression annotation)
(annotation-option-set symbol ...)
(annotation-options annotation)
(annotation-source annotation)
(annotation-stripped annotation)
(annotation? obj)
(append! list ...)
(append)
(append list ... obj)
(apply procedure obj ... list)
(apropos-list s)
(apropos-list s env)
(apropos s)
(apropos s env)
(ash int count)
(asinh num)
(asin num)
(assertion-violation? obj)
(assertion-violationf who msg irritant ...)
(assertion-violation who msg irritant ...)
(assert expression)
(assoc obj alist)
(assp procedure alist)
(assq obj alist)
(assv obj alist)
(atanh num)
(atan num)
(atan real1 real2)
(atom? obj)
(begin expr1 expr2 ...)
(bignum? obj)
(binary-port-input-buffer binary-input-port)
(binary-port-input-count binary-input-port)
(binary-port-input-index binary-input-port)
(binary-port-input-size binary-input-port)
(binary-port-output-buffer output-port)
(binary-port-output-count binary-output-port)
(binary-port-output-index output-port)
(binary-port-output-size output-port)
(binary-port? obj)
(bitwise-and exint ...)
(bitwise-arithmetic-shift-left exint1 exint2)
(bitwise-arithmetic-shift-right exint1 exint2)
(bitwise-arithmetic-shift exint1 exint2)
(bitwise-bit-count exint)
(bitwise-bit-field exint1 exint2 exint3)
(bitwise-bit-set? exint1 exint2)
(bitwise-copy-bit-field exint1 exint2 exint3 exint4)
(bitwise-copy-bit exint1 exint2 exint3)
(bitwise-first-bit-set exint)
(bitwise-if exint1 exint2 exint3)
(bitwise-ior exint ...)
(bitwise-length exint)
(bitwise-not exint)
(bitwise-reverse-bit-field exint1 exint2 exint3)
(bitwise-rotate-bit-field exint1 exint2 exint3 exint4)
(bitwise-xor exint ...)
(block-read textual-input-port string)
(block-read textual-input-port string count)
(block-write textual-output-port string)
(block-write textual-output-port string count)
(boolean? obj)
(boolean=? boolean1 boolean2)
(bound-identifier=? identifier1 identifier2)
(box-cas! box old-obj new-obj)
(box-immutable obj)
(box? obj)
(box obj)
(break)
(break who)
(break who msg irritant ...)
(buffer-mode? obj)
(buffer-mode symbol)
(bwp-object? obj)
(bytes-allocated)
(bytes-allocated g)
(bytes-deallocated)
(bytevector->immutable-bytevector bytevector)
(bytevector->s8-list bytevector)
(bytevector->sint-list bytevector eness size)
(bytevector->string bytevector transcoder)
(bytevector->u8-list bytevector)
(bytevector->uint-list bytevector eness size)
(bytevector-compress bytevector)
(bytevector-copy! src src-start dst dst-start n)
(bytevector-copy bytevector)
(bytevector-fill! bytevector fill)
(bytevector-ieee-double-native-ref bytevector n)
(bytevector-ieee-double-native-set! bytevector n x)
(bytevector-ieee-double-ref bytevector n eness)
(bytevector-ieee-double-set! bytevector n x eness)
(bytevector-ieee-single-native-ref bytevector n)
(bytevector-ieee-single-native-set! bytevector n x)
(bytevector-ieee-single-ref bytevector n eness)
(bytevector-ieee-single-set! bytevector n x eness)
(bytevector-length bytevector)
(bytevector-s16-native-ref bytevector n)
(bytevector-s16-native-set! bytevector n s16)
(bytevector-s16-ref bytevector n eness)
(bytevector-s16-set! bytevector n s16 eness)
(bytevector-s24-ref bytevector n eness)
(bytevector-s24-set! bytevector n s24 eness)
(bytevector-s32-native-ref bytevector n)
(bytevector-s32-native-set! bytevector n s32)
(bytevector-s32-ref bytevector n eness)
(bytevector-s32-set! bytevector n s32 eness)
(bytevector-s40-ref bytevector n eness)
(bytevector-s40-set! bytevector n s40 eness)
(bytevector-s48-ref bytevector n eness)
(bytevector-s48-set! bytevector n s48 eness)
(bytevector-s56-ref bytevector n eness)
(bytevector-s56-set! bytevector n s56 eness)
(bytevector-s64-native-ref bytevector n)
(bytevector-s64-native-set! bytevector n s64)
(bytevector-s64-ref bytevector n eness)
(bytevector-s64-set! bytevector n s64 eness)
(bytevector-s8-ref bytevector n)
(bytevector-s8-set! bytevector n s8)
(bytevector-sint-ref bytevector n eness size)
(bytevector-sint-set! bytevector n sint eness size)
(bytevector-truncate! bytevector n)
(bytevector-u16-native-ref bytevector n)
(bytevector-u16-native-set! bytevector n u16)
(bytevector-u16-ref bytevector n eness)
(bytevector-u16-set! bytevector n u16 eness)
(bytevector-u24-ref bytevector n eness)
(bytevector-u24-set! bytevector n u24 eness)
(bytevector-u32-native-ref bytevector n)
(bytevector-u32-native-set! bytevector n u32)
(bytevector-u32-ref bytevector n eness)
(bytevector-u32-set! bytevector n u32 eness)
(bytevector-u40-ref bytevector n eness)
(bytevector-u40-set! bytevector n u40 eness)
(bytevector-u48-ref bytevector n eness)
(bytevector-u48-set! bytevector n u48 eness)
(bytevector-u56-ref bytevector n eness)
(bytevector-u56-set! bytevector n u56 eness)
(bytevector-u64-native-ref bytevector n)
(bytevector-u64-native-set! bytevector n u64)
(bytevector-u64-ref bytevector n eness)
(bytevector-u64-set! bytevector n u64 eness)
(bytevector-u8-ref bytevector n)
(bytevector-u8-set! bytevector n u8)
(bytevector-uint-ref bytevector n eness size)
(bytevector-uint-set! bytevector n uint eness size)
(bytevector-uncompress bytevector)
(bytevector? obj)
(bytevector=? bytevector1 bytevector2)
(bytevector fill ...)
(caaaar pair)
(caaadr pair)
(caaar pair)
(caadar pair)
(caaddr pair)
(caadr pair)
(caar pair)
(cadaar pair)
(cadadr pair)
(cadar pair)
(caddar pair)
(cadddr pair)
(caddr pair)
(cadr pair)
(call-with-bytevector-output-port procedure)
(call-with-bytevector-output-port procedure ?transcoder)
(call-with-current-continuation procedure)
(call-with-input-file path procedure)
(call-with-input-file path procedure options)
(call-with-output-file path procedure)
(call-with-output-file path procedure options)
(call-with-port port procedure)
(call-with-string-output-port procedure)
(call-with-values producer consumer)
(call/1cc procedure)
(call/cc procedure)
(car pair)
(case-lambda clause ...)
(case expr0 clause1 clause2 ...)
(cdaaar pair)
(cdaadr pair)
(cdaar pair)
(cdadar pair)
(cdaddr pair)
(cdadr pair)
(cdar pair)
(cddaar pair)
(cddadr pair)
(cddar pair)
(cdddar pair)
(cddddr pair)
(cdddr pair)
(cddr pair)
(cdr pair)
(ceiling real)
(cfl-conjugate cflonum)
(cfl-imag-part cflonum)
(cfl-magnitude-squared cflonum)
(cfl-real-part cflonum)
(cfl- cflonum1 cflonum2 ...)
(cfl* cflonum ...)
(cfl/ cflonum1 cflonum2 ...)
(cfl+ cflonum ...)
(cfl= cflonum ...)
(cflonum? obj)
(char->integer char)
(char-alphabetic? char)
(char-ci<? char1 char2 ...)
(char-ci<? char1 char2 char3 ...)
(char-ci<=? char1 char2 ...)
(char-ci<=? char1 char2 char3 ...)
(char-ci=? char1 char2 ...)
(char-ci=? char1 char2 char3 ...)
(char-ci>? char1 char2 ...)
(char-ci>? char1 char2 char3 ...)
(char-ci>=? char1 char2 ...)
(char-ci>=? char1 char2 char3 ...)
(char-downcase char)
(char-foldcase char)
(char-general-category char)
(char-lower-case? char)
(char-name name char)
(char-name obj)
(char-numeric? char)
(char-ready?)
(char-ready? textual-input-port)
(char-title-case? char)
(char-titlecase char)
(char-upcase char)
(char-upper-case? char)
(char-whitespace? char)
(char- char1 char2)
(char? obj)
(char<? char1 char2 ...)
(char<? char1 char2 char3 ...)
(char<=? char1 char2 ...)
(char<=? char1 char2 char3 ...)
(char=? char1 char2 ...)
(char=? char1 char2 char3 ...)
(char>? char1 char2 ...)
(char>? char1 char2 char3 ...)
(char>=? char1 char2 ...)
(char>=? char1 char2 char3 ...)
(chmod path mode)
(clear-input-port)
(clear-input-port input-port)
(clear-output-port)
(clear-output-port output-port)
(close-input-port input-port)
(close-output-port output-port)
(close-port port)
(collect-rendezvous)
(collect)
(collections)
(collect g)
(collect g tg)
(command-line)
(compile-file input-filename)
(compile-file input-filename output-filename)
(compile-library input-filename)
(compile-library input-filename output-filename)
(compile-port input-port output-port)
(compile-port input-port output-port sfd)
(compile-port input-port output-port sfd wpo-port)
(compile-program input-filename)
(compile-program input-filename output-filename)
(compile-script input-filename)
(compile-script input-filename output-filename)
(compile-time-value-value ctv)
(compile-time-value? obj)
(compile-to-file obj-list output-file)
(compile-to-file obj-list output-file sfd)
(compile-to-port obj-list output-port)
(compile-to-port obj-list output-port sfd)
(compile-to-port obj-list output-port sfd wpo-port)
(compile-whole-library input-filename output-filename)
(compile-whole-program input-filename output-filename)
(compile-whole-program input-filename output-filename libs-visible?)
(compile obj)
(compile obj env)
(complex? obj)
(compute-composition object)
(compute-composition object generation)
(compute-size object)
(compute-size object generation)
(condition-accessor rtd procedure)
(condition-broadcast cond)
(condition-continuation condition)
(condition-irritants condition)
(condition-message condition)
(condition-predicate rtd)
(condition-signal cond)
(condition-wait cond mutex)
(condition-wait cond mutex timeout)
(condition-who condition)
(condition? obj)
(condition condition ...)
(cond clause1 clause2 ...)
(conjugate num)
(cons* obj ... final-obj)
(cons obj1 obj2)
(continuation-condition? obj)
(copy-environment env)
(copy-environment env mutable?)
(copy-environment env mutable? syms)
(copy-time time)
(cosh num)
(cost-center-allocation-count cost-center)
(cost-center-instruction-count cost-center)
(cost-center-time cost-center)
(cost-center? obj)
(cos num)
(cpu-time)
(create-exception-state)
(create-exception-state procedure)
(critical-section body1 body2 ...)
(current-date)
(current-date offset)
(current-error-port)
(current-input-port)
(current-memory-bytes)
(current-output-port)
(current-time)
(current-time time-type)
(date->time-utc date)
(date-and-time)
(date-and-time date)
(date-day date)
(date-dst? date)
(date-hour date)
(date-minute date)
(date-month date)
(date-nanosecond date)
(date-second date)
(date-week-day date)
(date-year-day date)
(date-year date)
(date-zone-name date)
(date-zone-offset date)
(date? obj)
(datum->syntax-object template-identifier obj)
(datum->syntax template-identifier obj)
(datum template)
(debug)
(decode-float x)
(default-exception-handler obj)
(default-library-search-handler who library directories extensions)
(default-prompt-and-read level)
(define-condition-type name parent constructor pred field ...)
(define-enumeration name (symbol ...) constructor)
(define-ftype (ftype-name ftype) ...)
(define-ftype ftype-name ftype)
(define-property id key expr)
(define-record-type (record-name constructor pred) clause ...)
(define-record-type record-name clause ...)
(define-record name (fld1 ...) ((fld2 init) ...) (opt ...))
(define-record name parent (fld1 ...) ((fld2 init) ...) (opt ...))
(define-structure (name id1 ...) ((id2 expr) ...))
(define-syntax keyword expr)
(define-top-level-syntax symbol obj)
(define-top-level-syntax symbol obj env)
(define-top-level-value symbol obj)
(define-top-level-value symbol obj env)
(define-values formals expr)
(define (var0 . varr) body1 body2 ...)
(define (var0 var1 ...) body1 body2 ...)
(define (var0 var1 var2 ... . varr) body1 body2 ...)
(define var)
(define var expr)
(delay expr)
(delete-directory path)
(delete-directory path error?)
(delete-file path)
(delete-file path error?)
(denominator rat)
(directory-list path)
(directory-separator)
(directory-separator? char)
(disable-interrupts)
(display-condition obj)
(display-condition obj textual-output-port)
(display-statistics)
(display-statistics textual-output-port)
(display-string string)
(display-string string textual-output-port)
(display obj)
(display obj textual-output-port)
(div-and-mod x1 x2)
(div0-and-mod0 x1 x2)
(div0 x1 x2)
(div x1 x2)
(do ((var init update) ...) (test result ...) expr ...)
(dynamic-wind critical? in body out)
(dynamic-wind in body out)
(ee-bind-key key procedure)
(ee-compose ecmd ...)
(ee-string-macro string)
(enable-interrupts)
(endianness symbol)
(engine-block)
(engine-return obj ...)
(enum-set->list enum-set)
(enum-set-complement enum-set)
(enum-set-constructor enum-set)
(enum-set-difference enum-set1 enum-set2)
(enum-set-indexer enum-set)
(enum-set-intersection enum-set1 enum-set2)
(enum-set-member? symbol enum-set)
(enum-set-projection enum-set1 enum-set2)
(enum-set-subset? enum-set1 enum-set2)
(enum-set-union enum-set1 enum-set2)
(enum-set-universe enum-set)
(enum-set? obj)
(enum-set=? enum-set1 enum-set2)
(enumerate ls)
(environment-mutable? env)
(environment-symbols env)
(environment? obj)
(environment import-spec ...)
(eof-object)
(eof-object? obj)
(eol-style symbol)
(ephemeron-cons obj1 obj2)
(ephemeron-pair? obj)
(eq-hashtable-cell hashtable key default)
(eq-hashtable-contains? hashtable key)
(eq-hashtable-delete! hashtable key)
(eq-hashtable-ephemeron? hashtable)
(eq-hashtable-ref hashtable key default)
(eq-hashtable-set! hashtable key value)
(eq-hashtable-update! hashtable key procedure default)
(eq-hashtable-weak? hashtable)
(eq-hashtable? obj)
(eq? obj1 obj2)
(equal-hash obj)
(equal? obj1 obj2)
(eqv? obj1 obj2)
(error-handling-mode symbol)
(error? obj)
(errorf who msg irritant ...)
(error who msg irritant ...)
(eval-when situations form1 form2 ...)
(eval obj)
(eval obj env)
(eval obj environment)
(even? int)
(exact->inexact num)
(exact-integer-sqrt n)
(exact? num)
(exact num)
(exclusive-cond clause1 clause2 ...)
(exists procedure list1 list2 ...)
(exit)
(exit obj)
(exit obj ...)
(expand/optimize obj)
(expand/optimize obj env)
(expand obj)
(expand obj env)
(export export-spec ...)
(expr0 expr1 ...)
(expt-mod int1 int2 int3)
(expt num1 num2)
(exp num)
(extend-syntax (name key ...) (pat fender template) ...)
(fasl-file ifn ofn)
(fasl-read binary-input-port)
(fasl-strip-options symbol ...)
(fasl-write obj binary-output-port)
(file-access-time path/port)
(file-access-time path/port follow?)
(file-change-time path/port)
(file-change-time path/port follow?)
(file-directory? path)
(file-directory? path follow?)
(file-exists? path)
(file-exists? path follow?)
(file-length port)
(file-modification-time path/port)
(file-modification-time path/port follow?)
(file-options symbol ...)
(file-port? port)
(file-position port)
(file-position port pos)
(file-regular? path)
(file-regular? path follow?)
(file-symbolic-link? path)
(filter procedure list)
(find procedure list)
(finite? real)
(fixnum->flonum fx)
(fixnum-width)
(fixnum? obj)
(fl-make-rectangular flonum1 flonum2)
(fl- fl)
(fl- fl1 fl2 fl3 ...)
(fl* fl ...)
(fl/ fl)
(fl/ fl1 fl2 fl3 ...)
(fl+ fl ...)
(fl<? fl1 fl2 fl3 ...)
(fl<=? fl1 fl2 fl3 ...)
(fl<= flonum1 flonum2 ...)
(fl< flonum1 flonum2 ...)
(fl=? fl1 fl2 fl3 ...)
(fl= flonum1 flonum2 ...)
(fl>? fl1 fl2 fl3 ...)
(fl>=? fl1 fl2 fl3 ...)
(fl>= flonum1 flonum2 ...)
(fl> flonum1 flonum2 ...)
(flabs fl)
(flacos fl)
(flasin fl)
(flatan fl)
(flatan fl1 fl2)
(flceiling fl)
(flcos fl)
(fldenominator fl)
(fldiv-and-mod fl1 fl2)
(fldiv0-and-mod0 fl1 fl2)
(fldiv0 fl1 fl2)
(fldiv fl1 fl2)
(fleven? fl-int)
(flexpt fl1 fl2)
(flexp fl)
(flfinite? fl)
(flfloor fl)
(flinfinite? fl)
(flinteger? fl)
(fllog fl)
(fllog fl1 fl2)
(fllp flonum)
(flmax fl1 fl2 ...)
(flmin fl1 fl2 ...)
(flmod0 fl1 fl2)
(flmod fl1 fl2)
(flnan? fl)
(flnegative? fl)
(flnonnegative? fl)
(flnonpositive? fl)
(flnumerator fl)
(flodd? fl-int)
(flonum->fixnum flonum)
(flonum? obj)
(floor real)
(flpositive? fl)
(flround fl)
(flsin fl)
(flsqrt fl)
(fltan fl)
(fltruncate fl)
(fluid-let-syntax ((keyword expr) ...) form1 form2 ...)
(fluid-let ((var expr) ...) body1 body2 ...)
(flush-output-port)
(flush-output-port output-port)
(flzero? fl)
(fold-left procedure obj list1 list2 ...)
(fold-right procedure obj list1 list2 ...)
(for-all procedure list1 list2 ...)
(for-each procedure list1 list2 ...)
(force promise)
(foreign-address-name address)
(foreign-alloc n)
(foreign-callable-code-object address)
(foreign-callable-entry-point code)
(foreign-callable conv ... proc-exp (param-type ...) res-type)
(foreign-entry? entry-name)
(foreign-entry entry-name)
(foreign-free address)
(foreign-procedure conv ... entry-exp (param-type ...) res-type)
(foreign-ref type address offset)
(foreign-set! type address offset value)
(foreign-sizeof type)
(fork-thread thunk)
(format-condition? obj)
(format #f format-string obj ...)
(format #t format-string obj ...)
(format format-string obj ...)
(format textual-output-port format-string obj ...)
(fprintf textual-output-port format-string obj ...)
(free-identifier=? identifier1 identifier2)
(fresh-line)
(fresh-line textual-output-port)
(ftype-&ref ftype-name (a ...) fptr-expr)
(ftype-&ref ftype-name (a ...) fptr-expr index)
(ftype-guardian ftype-name)
(ftype-init-lock! ftype-name (a ...) fptr-expr)
(ftype-init-lock! ftype-name (a ...) fptr-expr index)
(ftype-lock! ftype-name (a ...) fptr-expr)
(ftype-lock! ftype-name (a ...) fptr-expr index)
(ftype-locked-decr! ftype-name (a ...) fptr-expr)
(ftype-locked-decr! ftype-name (a ...) fptr-expr index)
(ftype-locked-incr! ftype-name (a ...) fptr-expr)
(ftype-locked-incr! ftype-name (a ...) fptr-expr index)
(ftype-pointer->sexpr fptr)
(ftype-pointer-address fptr)
(ftype-pointer-ftype fptr)
(ftype-pointer-null? fptr)
(ftype-pointer? ftype-name obj)
(ftype-pointer? obj)
(ftype-pointer=? fptr1 fptr2)
(ftype-ref ftype-name (a ...) fptr-expr)
(ftype-ref ftype-name (a ...) fptr-expr index)
(ftype-set! ftype-name (a ...) fptr-expr index val-expr)
(ftype-set! ftype-name (a ...) fptr-expr val-expr)
(ftype-sizeof ftype-name)
(ftype-spin-lock! ftype-name (a ...) fptr-expr)
(ftype-spin-lock! ftype-name (a ...) fptr-expr index)
(ftype-unlock! ftype-name (a ...) fptr-expr)
(ftype-unlock! ftype-name (a ...) fptr-expr index)
(fx-/carry fx1 fx2 fx3)
(fx- fixnum1 fixnum2 ...)
(fx- fx)
(fx- fx1 fx2)
(fx*/carry fx1 fx2 fx3)
(fx* fixnum ...)
(fx* fx1 fx2)
(fx/ fixnum1 fixnum2 ...)
(fx+/carry fx1 fx2 fx3)
(fx+ fixnum ...)
(fx+ fx1 fx2)
(fx<? fx1 fx2 fx3 ...)
(fx<=? fx1 fx2 fx3 ...)
(fx<= fixnum1 fixnum2 ...)
(fx< fixnum1 fixnum2 ...)
(fx=? fx1 fx2 fx3 ...)
(fx= fixnum1 fixnum2 ...)
(fx>? fx1 fx2 fx3 ...)
(fx>=? fx1 fx2 fx3 ...)
(fx>= fixnum1 fixnum2 ...)
(fx> fixnum1 fixnum2 ...)
(fx1- fixnum)
(fx1+ fixnum)
(fxabs fixnum)
(fxand fx ...)
(fxarithmetic-shift-left fx1 fx2)
(fxarithmetic-shift-right fx1 fx2)
(fxarithmetic-shift fx1 fx2)
(fxbit-count fx)
(fxbit-field fx1 fx2 fx3)
(fxbit-set? fx1 fx2)
(fxcopy-bit-field fx1 fx2 fx3 fx4)
(fxcopy-bit fx1 fx2 fx3)
(fxdiv-and-mod fx1 fx2)
(fxdiv0-and-mod0 fx1 fx2)
(fxdiv0 fx1 fx2)
(fxdiv fx1 fx2)
(fxeven? fx)
(fxfirst-bit-set fx)
(fxif fx1 fx2 fx3)
(fxior fx ...)
(fxlength fx)
(fxlogand fixnum ...)
(fxlogbit? index fixnum)
(fxlogbit0 index fixnum)
(fxlogbit1 index fixnum)
(fxlogior fixnum ...)
(fxlognot fixnum)
(fxlogor fixnum ...)
(fxlogtest fixnum1 fixnum2)
(fxlogxor fixnum ...)
(fxmax fx1 fx2 ...)
(fxmin fx1 fx2 ...)
(fxmod0 fx1 fx2)
(fxmodulo fixnum1 fixnum2)
(fxmod fx1 fx2)
(fxnegative? fx)
(fxnonnegative? fixnum)
(fxnonpositive? fixnum)
(fxnot fx)
(fxodd? fx)
(fxpositive? fx)
(fxquotient fixnum1 fixnum2 ...)
(fxremainder fixnum1 fixnum2)
(fxreverse-bit-field fx1 fx2 fx3)
(fxrotate-bit-field fx1 fx2 fx3 fx4)
(fxsll fixnum count)
(fxsra fixnum count)
(fxsrl fixnum count)
(fxvector->immutable-fxvector fxvector)
(fxvector->list fxvector)
(fxvector-copy fxvector)
(fxvector-fill! fxvector fixnum)
(fxvector-length fxvector)
(fxvector-ref fxvector n)
(fxvector-set! fxvector n fixnum)
(fxvector? obj)
(fxvector fixnum ...)
(fxxor fx ...)
(fxzero? fx)
(gcd int ...)
(generate-profile-forms)
(generate-temporaries list)
(gensym->unique-string gensym)
(gensym)
(gensym? obj)
(gensym pretty-name)
(gensym pretty-name unique-name)
(get-bytevector-all binary-input-port)
(get-bytevector-n! binary-input-port bytevector start n)
(get-bytevector-n binary-input-port n)
(get-bytevector-some! binary-input-port bytevector start n)
(get-bytevector-some binary-input-port)
(get-char textual-input-port)
(get-datum/annotations textual-input-port sfd bfp)
(get-datum textual-input-port)
(get-hash-table ht k d)
(get-line textual-input-port)
(get-mode path)
(get-mode path follow?)
(get-output-string string-output-port)
(get-process-id)
(get-registry key)
(get-string-all textual-input-port)
(get-string-n! textual-input-port string start n)
(get-string-n textual-input-port n)
(get-string-some! textual-input-port string start n)
(get-string-some textual-input-port)
(get-thread-id)
(get-u8 binary-input-port)
(getenv key)
(getprop symbol key)
(getprop symbol key default)
(greatest-fixnum)
(guard (var clause1 clause2 ...) b1 b2 ...)
(hash-table-for-each ht p)
(hash-table-map ht p)
(hash-table? obj)
(hashtable-cells hashtable)
(hashtable-cells hashtable size)
(hashtable-cell hashtable key default)
(hashtable-clear! hashtable)
(hashtable-clear! hashtable size)
(hashtable-contains? hashtable key)
(hashtable-copy hashtable)
(hashtable-copy hashtable mutable?)
(hashtable-delete! hashtable key)
(hashtable-entries hashtable)
(hashtable-entries hashtable size)
(hashtable-ephemeron? obj)
(hashtable-equivalence-function hashtable)
(hashtable-hash-function hashtable)
(hashtable-keys hashtable)
(hashtable-keys hashtable size)
(hashtable-mutable? hashtable)
(hashtable-ref hashtable key default)
(hashtable-set! hashtable key obj)
(hashtable-size hashtable)
(hashtable-update! hashtable key procedure default)
(hashtable-values hashtable)
(hashtable-values hashtable size)
(hashtable-weak? obj)
(hashtable? obj)
(i/o-decoding-error? obj)
(i/o-encoding-error-char condition)
(i/o-encoding-error? obj)
(i/o-error-filename condition)
(i/o-error-port condition)
(i/o-error-position condition)
(i/o-error? obj)
(i/o-file-already-exists-error? obj)
(i/o-file-does-not-exist-error? obj)
(i/o-file-is-read-only-error? obj)
(i/o-file-protection-error? obj)
(i/o-filename-error? obj)
(i/o-invalid-position-error? obj)
(i/o-port-error? obj)
(i/o-read-error? obj)
(i/o-write-error? obj)
(iconv-codec code-page)
(identifier-syntax (id1 tmpl1) ((set! id2 e2) tmpl2))
(identifier-syntax tmpl)
(identifier? obj)
(ieee-environment)
(if test consequent)
(if test consequent alternative)
(imag-part num)
(immutable-box? obj)
(immutable-bytevector? obj)
(immutable-fxvector? obj)
(immutable-string? obj)
(immutable-vector? obj)
(implementation-restriction-violation? obj)
(implicit-exports #f)
(implicit-exports #t)
(import-only import-spec ...)
(import import-spec ...)
(include path)
(indirect-export id indirect-id ...)
(inexact->exact num)
(inexact? num)
(inexact num)
(infinite? real)
(initial-bytes-allocated)
(input-port-ready? input-port)
(input-port? obj)
(inspect/object object)
(inspect obj)
(integer->char n)
(integer-length n)
(integer-valued? obj)
(integer? obj)
(interactive?)
(interpret obj)
(interpret obj env)
(iota n)
(irritants-condition? obj)
(isqrt n)
(lambda formals body1 body2 ...)
(last-pair list)
(latin-1-codec)
(lcm int ...)
(least-fixnum)
(length list)
(let-syntax ((keyword expr) ...) form1 form2 ...)
(let-values ((formals expr) ...) body1 body2 ...)
(let*-values ((formals expr) ...) body1 body2 ...)
(let* ((var expr) ...) body1 body2 ...)
(letrec-syntax ((keyword expr) ...) form1 form2 ...)
(letrec* ((var expr) ...) body1 body2 ...)
(letrec ((var expr) ...) body1 body2 ...)
(let ((var expr) ...) body1 body2 ...)
(let name ((var expr) ...) body1 body2 ...)
(lexical-violation? obj)
(library-exports libref)
(library-list)
(library-object-filename libref)
(library-requirements-options symbol ...)
(library-requirements libref)
(library-requirements libref options)
(library-version libref)
(library name exports imports library-body)
(list->fxvector list)
(list->string list)
(list->vector list)
(list-copy list)
(list-head list n)
(list-ref list n)
(list-sort predicate list)
(list-tail list n)
(list* obj ... final-obj)
(list? obj)
(list obj ...)
(literal-identifier=? identifier1 identifier2)
(load-compiled-from-port input-port)
(load-library path)
(load-library path eval-proc)
(load-program path)
(load-program path eval-proc)
(load-shared-object path)
(load path)
(load path eval-proc)
(locate-source-object-source source-object get-start? use-cache?)
(locate-source sfd pos)
(locate-source sfd pos use-cache?)
(lock-object obj)
(locked-object? obj)
(logand int ...)
(logbit? index int)
(logbit0 index int)
(logbit1 index int)
(logior int ...)
(lognot int)
(logor int ...)
(logtest int1 int2)
(logxor int ...)
(log num)
(log num1 num2)
(lookahead-char textual-input-port)
(lookahead-u8 binary-input-port)
(machine-type)
(magnitude-squared num)
(magnitude num)
(make-annotation obj source-object stripped-obj)
(make-annotation obj source-object stripped-obj options)
(make-assertion-violation)
(make-boot-file output-filename base-boot-list input-filename ...)
(make-boot-header output-filename base-boot1 base-boot2...)
(make-bytevector n)
(make-bytevector n fill)
(make-compile-time-value obj)
(make-condition)
(make-continuation-condition continuation)
(make-cost-center)
(make-custom-binary-input-port id r! gp sp! close)
(make-custom-binary-input/output-port id r! w! gp sp! close)
(make-custom-binary-output-port id w! gp sp! close)
(make-custom-textual-input-port id r! gp sp! close)
(make-custom-textual-input/output-port id r! w! gp sp! close)
(make-custom-textual-output-port id w! gp sp! close)
(make-date nsec sec min hour day mon year)
(make-date nsec sec min hour day mon year offset)
(make-engine thunk)
(make-enumeration symbol-list)
(make-ephemeron-eq-hashtable)
(make-ephemeron-eq-hashtable size)
(make-ephemeron-eqv-hashtable)
(make-ephemeron-eqv-hashtable size)
(make-eq-hashtable)
(make-eq-hashtable size)
(make-eqv-hashtable)
(make-eqv-hashtable size)
(make-error)
(make-format-condition)
(make-ftype-pointer ftype-name expr)
(make-fxvector n)
(make-fxvector n fixnum)
(make-guardian)
(make-hash-table)
(make-hash-table weak?)
(make-hashtable hash equiv?)
(make-hashtable hash equiv? size)
(make-i/o-decoding-error pobj)
(make-i/o-encoding-error pobj cobj)
(make-i/o-error)
(make-i/o-file-already-exists-error filename)
(make-i/o-file-does-not-exist-error filename)
(make-i/o-file-is-read-only-error filename)
(make-i/o-file-protection-error filename)
(make-i/o-filename-error filename)
(make-i/o-invalid-position-error position)
(make-i/o-port-error pobj)
(make-i/o-read-error)
(make-i/o-write-error)
(make-implementation-restriction-violation)
(make-input-port handler input-buffer)
(make-input/output-port handler input-buffer output-buffer)
(make-irritants-condition irritants)
(make-lexical-violation)
(make-list n)
(make-list n obj)
(make-message-condition message)
(make-mutex)
(make-no-infinities-violation)
(make-no-nans-violation)
(make-non-continuable-violation)
(make-object-finder pred)
(make-object-finder pred g)
(make-object-finder pred x g)
(make-output-port handler output-buffer)
(make-parameter object)
(make-parameter object procedure)
(make-polar real1 real2)
(make-record-constructor-descriptor rtd parent-rcd protocol)
(make-record-type-descriptor name parent uid s? o? fields)
(make-record-type parent-rtd type-name fields)
(make-record-type type-name fields)
(make-rectangular real1 real2)
(make-serious-condition)
(make-source-condition form)
(make-source-file-descriptor string binary-input-port)
(make-source-file-descriptor string binary-input-port reset?)
(make-source-object sfd bfp efp)
(make-source-object sfd bfp efp line column)
(make-sstats cpu real bytes gc-count gc-cpu gc-real gc-bytes)
(make-string n)
(make-string n char)
(make-syntax-violation form subform)
(make-thread-parameter object)
(make-thread-parameter object procedure)
(make-time type nsec sec)
(make-transcoder codec)
(make-transcoder codec eol-style)
(make-transcoder codec eol-style error-handling-mode)
(make-undefined-violation)
(make-variable-transformer procedure)
(make-vector n)
(make-vector n obj)
(make-violation)
(make-warning)
(make-weak-eq-hashtable)
(make-weak-eq-hashtable size)
(make-weak-eqv-hashtable)
(make-weak-eqv-hashtable size)
(make-who-condition who)
(map procedure list1 list2 ...)
(mark-port-closed! port)
(maximum-memory-bytes)
(max real1 real2 ...)
(maybe-compile-file input-filename)
(maybe-compile-file input-filename output-filename)
(maybe-compile-library input-filename)
(maybe-compile-library input-filename output-filename)
(maybe-compile-program input-filename)
(maybe-compile-program input-filename output-filename)
(member obj list)
(memp procedure list)
(memq obj list)
(memv obj list)
(merge! predicate list1 list2)
(merge predicate list1 list2)
(message-condition? obj)
(meta-cond clause1 clause2 ...)
(meta . definition)
(min real1 real2 ...)
(mkdir path)
(mkdir path mode)
(mod0 x1 x2)
(module interface defn ... init ...)
(module name interface defn ... init ...)
(modulo int1 int2)
(mod x1 x2)
(most-negative-fixnum)
(most-positive-fixnum)
(multibyte->string code-page bytevector)
(mutable-box? obj)
(mutable-bytevector? obj)
(mutable-fxvector? obj)
(mutable-string? obj)
(mutable-vector? obj)
(mutex-acquire mutex)
(mutex-acquire mutex block?)
(mutex-release mutex)
(mutex? obj)
(nan? real)
(native-endianness)
(native-eol-style)
(native-transcoder)
(negative? real)
(new-cafe)
(new-cafe eval-proc)
(newline)
(newline textual-output-port)
(no-infinities-violation? obj)
(no-nans-violation? obj)
(non-continuable-violation? obj)
(nonnegative? real)
(nonpositive? real)
(not obj)
(null-environment version)
(null? obj)
(number->string num)
(number->string num radix)
(number->string num radix precision)
(number? obj)
(numerator rat)
(object-counts)
(oblist)
(odd? int)
(open-bytevector-input-port bytevector)
(open-bytevector-input-port bytevector ?transcoder)
(open-bytevector-output-port)
(open-bytevector-output-port ?transcoder)
(open-fd-input-port fd)
(open-fd-input-port fd b-mode)
(open-fd-input-port fd b-mode ?transcoder)
(open-fd-input/output-port fd)
(open-fd-input/output-port fd b-mode)
(open-fd-input/output-port fd b-mode ?transcoder)
(open-fd-output-port fd)
(open-fd-output-port fd b-mode)
(open-fd-output-port fd b-mode ?transcoder)
(open-file-input-port path)
(open-file-input-port path options)
(open-file-input-port path options b-mode)
(open-file-input-port path options b-mode ?transcoder)
(open-file-input/output-port path)
(open-file-input/output-port path options)
(open-file-input/output-port path options b-mode)
(open-file-input/output-port path options b-mode ?transcoder)
(open-file-output-port path)
(open-file-output-port path options)
(open-file-output-port path options b-mode)
(open-file-output-port path options b-mode ?transcoder)
(open-input-file path)
(open-input-file path options)
(open-input-output-file path)
(open-input-output-file path options)
(open-input-string string)
(open-output-file path)
(open-output-file path options)
(open-output-string)
(open-process-ports command)
(open-process-ports command b-mode)
(open-process-ports command b-mode ?transcoder)
(open-source-file sfd)
(open-string-input-port string)
(open-string-output-port)
(ormap procedure list1 list2 ...)
(or expr ...)
(output-port-buffer-mode port)
(output-port? obj)
(pair? obj)
(parameterize ((param expr) ...) body1 body2 ...)
(pariah expr1 expr2 ...)
(partition procedure list)
(path-absolute? path)
(path-extension path)
(path-first path)
(path-last path)
(path-parent path)
(path-rest path)
(path-root path)
(peek-char)
(peek-char textual-input-port)
(petite?)
(port-bol? port)
(port-closed? port)
(port-eof? input-port)
(port-file-compressed! port)
(port-file-descriptor port)
(port-handler port)
(port-has-port-length? port)
(port-has-port-nonblocking?? port)
(port-has-port-position? port)
(port-has-set-port-length!? port)
(port-has-set-port-nonblocking!? port)
(port-has-set-port-position!? port)
(port-input-buffer input-port)
(port-input-count input-port)
(port-input-empty? input-port)
(port-input-index input-port)
(port-input-size input-port)
(port-length port)
(port-name port)
(port-nonblocking? port)
(port-output-buffer output-port)
(port-output-count output-port)
(port-output-full? output-port)
(port-output-index output-port)
(port-output-size output-port)
(port-position port)
(port-transcoder port)
(port? obj)
(positive? real)
(pretty-file ifn ofn)
(pretty-format sym)
(pretty-format sym fmt)
(pretty-print obj)
(pretty-print obj textual-output-port)
(printf format-string obj ...)
(procedure-arity-mask proc)
(procedure? obj)
(process command)
(profile-clear-database)
(profile-clear)
(profile-dump-data path)
(profile-dump-data path dump)
(profile-dump-html)
(profile-dump-html prefix)
(profile-dump-html prefix dump)
(profile-dump-list)
(profile-dump-list warn?)
(profile-dump-list warn? dump)
(profile-dump)
(profile-line-number-color)
(profile-load-data path ...)
(profile-palette)
(profile-query-weight obj)
(profile-release-counters)
(profile source-object)
(property-list symbol)
(put-bytevector-some binary-output-port bytevector)
(put-bytevector-some binary-output-port bytevector start)
(put-bytevector-some binary-output-port bytevector start n)
(put-bytevector binary-output-port bytevector)
(put-bytevector binary-output-port bytevector start)
(put-bytevector binary-output-port bytevector start n)
(put-char textual-output-port char)
(put-datum textual-output-port obj)
(put-hash-table! ht k v)
(put-registry! key val)
(put-string-some textual-output-port string)
(put-string-some textual-output-port string start)
(put-string-some textual-output-port string start n)
(put-string textual-output-port string)
(put-string textual-output-port string start)
(put-string textual-output-port string start n)
(put-u8 binary-output-port octet)
(putenv key value)
(putprop symbol key value)
(quasiquote obj ...)
(quasisyntax template ...)
(quote obj)
(quotient int1 int2)
(raise-continuable obj)
(raise obj)
(random real)
(rational-valued? obj)
(rational? obj)
(rationalize real1 real2)
(ratnum? obj)
(read-char)
(read-char textual-input-port)
(read-token)
(read-token textual-input-port)
(read)
(read textual-input-port)
(real->flonum real)
(real-part num)
(real-time)
(real-valued? obj)
(real? obj)
(record-accessor rtd idx)
(record-case expr clause1 clause2 ...)
(record-constructor-descriptor? obj)
(record-constructor-descriptor record-name)
(record-constructor rcd)
(record-constructor rtd)
(record-equal-procedure record1 record2)
(record-field-accessible? rtd field-id)
(record-field-accessor rtd field-id)
(record-field-mutable? rtd field-id)
(record-field-mutable? rtd idx)
(record-field-mutator rtd field-id)
(record-hash-procedure record)
(record-mutator rtd idx)
(record-predicate rtd)
(record-reader name)
(record-reader name #f)
(record-reader name rtd)
(record-reader rtd)
(record-reader rtd #f)
(record-rtd record)
(record-type-descriptor? obj)
(record-type-descriptor rec)
(record-type-descriptor record-name)
(record-type-equal-procedure rtd)
(record-type-equal-procedure rtd equal-proc)
(record-type-field-decls rtd)
(record-type-field-names rtd)
(record-type-generative? rtd)
(record-type-hash-procedure rtd)
(record-type-hash-procedure rtd hash-proc)
(record-type-name rtd)
(record-type-opaque? rtd)
(record-type-parent rtd)
(record-type-sealed? rtd)
(record-type-symbol rtd)
(record-type-uid rtd)
(record-writer rtd)
(record-writer rtd procedure)
(record? obj)
(record? obj rtd)
(rec var expr)
(register-signal-handler sig procedure)
(remainder int1 int2)
(remove-foreign-entry entry-name)
(remove-hash-table! ht k)
(remove-registry! key)
(remove! obj list)
(remove obj list)
(remprop symbol key)
(remp procedure list)
(remq! obj list)
(remq obj list)
(remv! obj list)
(remv obj list)
(rename-file old-pathname new-pathname)
(reset-cost-center! cost-center)
(reset-maximum-memory-bytes!)
(reset)
(reverse! list)
(reverse list)
(revisit path)
(round real)
(s8-list->bytevector list)
(sc-expand obj)
(sc-expand obj env)
(scheme-environment)
(scheme-report-environment version)
(scheme-version-number)
(scheme-version)
(serious-condition? obj)
(set-binary-port-input-buffer! binary-input-port bytevector)
(set-binary-port-input-index! binary-input-port n)
(set-binary-port-input-size! binary-input-port n)
(set-binary-port-output-buffer! binary-output-port bytevector)
(set-binary-port-output-index! output-port n)
(set-binary-port-output-size! output-port n)
(set-box! box obj)
(set-car! pair obj)
(set-cdr! pair obj)
(set-port-bol! output-port obj)
(set-port-eof! input-port obj)
(set-port-input-buffer! input-port x)
(set-port-input-index! input-port n)
(set-port-input-size! input-port n)
(set-port-length! port len)
(set-port-name! port obj)
(set-port-nonblocking! port obj)
(set-port-output-buffer! output-port x)
(set-port-output-index! output-port n)
(set-port-output-size! output-port n)
(set-port-position! port pos)
(set-sstats-bytes! s new-value)
(set-sstats-cpu! s new-value)
(set-sstats-gc-bytes! s new-value)
(set-sstats-gc-count! s new-value)
(set-sstats-gc-cpu! s new-value)
(set-sstats-gc-real! s new-value)
(set-sstats-real! s new-value)
(set-textual-port-input-buffer! textual-input-port string)
(set-textual-port-input-index! textual-input-port n)
(set-textual-port-input-size! textual-input-port n)
(set-textual-port-output-buffer! textual-output-port string)
(set-textual-port-output-index! textual-output-port n)
(set-textual-port-output-size! textual-output-port n)
(set-time-nanosecond! time nsec)
(set-time-second! time sec)
(set-time-type! time type)
(set-timer n)
(set-top-level-value! symbol obj)
(set-top-level-value! symbol obj env)
(set-virtual-register! k x)
(set! var expr)
(simple-conditions condition)
(sinh num)
(sint-list->bytevector list eness size)
(sin num)
(sleep time)
(sort! predicate list)
(sort predicate list)
(source-condition-form condition)
(source-condition? obj)
(source-file-descriptor-checksum sfd)
(source-file-descriptor-path sfd)
(source-file-descriptor? obj)
(source-file-descriptor path checksum)
(source-object-bfp source-object)
(source-object-column source-object)
(source-object-efp source-object)
(source-object-line source-object)
(source-object-sfd source-object)
(source-object? obj)
(sqrt num)
(sstats-bytes s)
(sstats-cpu s)
(sstats-difference s1 s2)
(sstats-gc-bytes s)
(sstats-gc-count s)
(sstats-gc-cpu s)
(sstats-gc-real s)
(sstats-print s)
(sstats-print s textual-output-port)
(sstats-real s)
(sstats? obj)
(standard-error-port)
(standard-error-port b-mode)
(standard-error-port b-mode ?transcoder)
(standard-input-port)
(standard-input-port b-mode)
(standard-input-port b-mode ?transcoder)
(standard-output-port)
(standard-output-port b-mode)
(standard-output-port b-mode ?transcoder)
(statistics)
(string->bytevector string transcoder)
(string->immutable-string string)
(string->list string)
(string->multibyte code-page string)
(string->number string)
(string->number string radix)
(string->symbol string)
(string->utf16 string)
(string->utf16 string endianness)
(string->utf32 string)
(string->utf32 string endianness)
(string->utf8 string)
(string-append string ...)
(string-ci-hash string)
(string-ci<? string1 string2 string3 ...)
(string-ci<=? string1 string2 string3 ...)
(string-ci=? string1 string2 string3 ...)
(string-ci>? string1 string2 string3 ...)
(string-ci>=? string1 string2 string3 ...)
(string-copy! src src-start dst dst-start n)
(string-copy string)
(string-downcase string)
(string-fill! string char)
(string-foldcase string)
(string-for-each procedure string1 string2 ...)
(string-hash string)
(string-length string)
(string-normalize-nfc string)
(string-normalize-nfd string)
(string-normalize-nfkc string)
(string-normalize-nfkd string)
(string-ref string n)
(string-set! string n char)
(string-titlecase string)
(string-truncate! string n)
(string-upcase string)
(string? obj)
(string<? string1 string2 string3 ...)
(string<=? string1 string2 string3 ...)
(string=? string1 string2 string3 ...)
(string>? string1 string2 string3 ...)
(string>=? string1 string2 string3 ...)
(string char ...)
(strip-fasl-file input-path output-path options)
(sub1 num)
(subst! new old tree)
(substq! new old tree)
(substq new old tree)
(substring-fill! string start end char)
(substring string start end)
(substv! new old tree)
(substv new old tree)
(subst new old tree)
(subtract-duration! time timed)
(subtract-duration time timed)
(symbol->string symbol)
(symbol-hashtable-cell hashtable key default)
(symbol-hashtable-contains? hashtable key)
(symbol-hashtable-delete! hashtable key)
(symbol-hashtable-ref hashtable key default)
(symbol-hashtable-set! hashtable key value)
(symbol-hashtable-update! hashtable key procedure default)
(symbol-hashtable? obj)
(symbol-hash symbol)
(symbol? obj)
(symbol=? symbol1 symbol2)
(syntax->annotation obj)
(syntax->datum obj)
(syntax->list syntax-object)
(syntax->vector syntax-object)
(syntax-case expr (literal ...) clause ...)
(syntax-error obj string ...)
(syntax-object->datum obj)
(syntax-rules (literal ...) clause ...)
(syntax-violation-form condition)
(syntax-violation-subform condition)
(syntax-violation? obj)
(syntax-violation who msg form)
(syntax-violation who msg form subform)
(syntax template)
(system command)
(tanh num)
(tan num)
(textual-port-input-buffer textual-input-port)
(textual-port-input-count textual-input-port)
(textual-port-input-index textual-input-port)
(textual-port-input-size textual-input-port)
(textual-port-output-buffer output-port)
(textual-port-output-count textual-output-port)
(textual-port-output-index output-port)
(textual-port-output-size output-port)
(textual-port? obj)
(thread-condition? obj)
(thread? obj)
(threaded?)
(time-difference! time1 time2)
(time-difference time1 time2)
(time-nanosecond time)
(time-second time)
(time-type time)
(time-utc->date time)
(time-utc->date time offset)
(time? obj)
(time<? time1 time2)
(time<=? time1 time2)
(time=? time1 time2)
(time>? time1 time2)
(time>=? time1 time2)
(time expr)
(top-level-bound? symbol)
(top-level-bound? symbol env)
(top-level-mutable? symbol)
(top-level-mutable? symbol env)
(top-level-program imports body)
(top-level-syntax? symbol)
(top-level-syntax? symbol env)
(top-level-syntax symbol)
(top-level-syntax symbol env)
(top-level-value symbol)
(top-level-value symbol env)
(trace-case-lambda name clause ...)
(trace-define-syntax keyword expr)
(trace-define (var . idspec) body1 body2 ...)
(trace-define var expr)
(trace-do ((var init update) ...) (test result ...) expr ...)
(trace-lambda name formals body1 body2 ...)
(trace-let name ((var expr) ...) body1 body2 ...)
(trace)
(trace var1 var2 ...)
(transcoded-port binary-port transcoder)
(transcoder-codec transcoder)
(transcoder-eol-style transcoder)
(transcoder-error-handling-mode transcoder)
(transcoder? obj)
(transcript-cafe path)
(transcript-off)
(transcript-on path)
(truncate-file output-port)
(truncate-file output-port pos)
(truncate-port output-port)
(truncate-port output-port pos)
(truncate real)
(type-descriptor name)
(u8-list->bytevector list)
(uint-list->bytevector list eness size)
(unbox box)
(undefined-violation? obj)
(unget-char textual-input-port char)
(unget-u8 binary-input-port octet)
(unless test-expr expr1 expr2 ...)
(unlock-object obj)
(unquote-splicing obj ...)
(unquote obj ...)
(unread-char char)
(unread-char char textual-input-port)
(unsyntax-splicing template ...)
(unsyntax template ...)
(untrace)
(untrace var1 var2 ...)
(utf-16-codec)
(utf-16-codec endianness)
(utf-16be-codec)
(utf-16le-codec)
(utf-8-codec)
(utf16->string bytevector endianness)
(utf16->string bytevector endianness endianness-mandatory?)
(utf32->string bytevector endianness)
(utf32->string bytevector endianness endianness-mandatory?)
(utf8->string bytevector)
(values obj ...)
(vector->immutable-vector vector)
(vector->list vector)
(vector-cas! vector n old-obj new-obj)
(vector-copy vector)
(vector-fill! vector obj)
(vector-for-each procedure vector1 vector2 ...)
(vector-length vector)
(vector-map procedure vector1 vector1 ...)
(vector-ref vector n)
(vector-set-fixnum! vector n fixnum)
(vector-set! vector n obj)
(vector-sort! predicate vector)
(vector-sort predicate vector)
(vector? obj)
(vector obj ...)
(violation? obj)
(virtual-register-count)
(virtual-register k)
(visit path)
(void)
(warning? obj)
(warningf who msg irritant ...)
(warning who msg irritant ...)
(weak-cons obj1 obj2)
(weak-pair? obj)
(when test-expr expr1 expr2 ...)
(who-condition? obj)
(with-cost-center cost-center thunk)
(with-cost-center timed? cost-center thunk)
(with-exception-handler procedure thunk)
(with-implicit (id0 id1 ...) body1 body2 ...)
(with-input-from-file path thunk)
(with-input-from-file path thunk options)
(with-input-from-string string thunk)
(with-interrupts-disabled body1 body2 ...)
(with-mutex mutex body1 body2 ...)
(with-output-to-file path thunk)
(with-output-to-file path thunk options)
(with-output-to-string thunk)
(with-source-path who name procedure)
(with-syntax ((pattern expr) ...) body1 body2 ...)
(with ((pat expr) ...) template)
(write-char char)
(write-char char textual-output-port)
(write obj)
(write obj textual-output-port)
(zero? num)
,@obj
,obj
...
_
`obj
=>
abort-handler
add-prefix
alias
base-exception-handler
break-handler
case-sensitive
cd
collect-generation-radix
collect-maximum-generation
collect-notify
collect-request-handler
collect-trip-bytes
command-line
command-line-arguments
commonization-level
compile-compressed
compile-file-message
compile-imported-libraries
compile-interpret-simple
compile-library-handler
compile-profile
compile-program-handler
console-error-port
console-input-port
console-output-port
constant
constructor
cp0-effort-limit
cp0-outer-unroll-limit
cp0-score-limit
current-directory
current-error-port
current-eval
current-exception-state
current-expand
current-input-port
current-locate-source-object-source
current-make-source-object
current-output-port
current-transcoder
custom-port-buffer-size
debug-condition
debug-level
debug-on-exception
default-record-equal-procedure
default-record-hash-procedure
drop-prefix
ee-auto-indent
ee-auto-paren-balance
ee-common-identifiers
ee-default-repeat
ee-flash-parens
ee-history-limit
ee-noisy
ee-paren-flash-delay
ee-standard-indent
else
enable-cross-library-optimization
enable-object-counts
eval-syntax-expanders-when
except
exit-handler
expand-output
expand/optimize-output
expression-editor
fields
file-buffer-size
generate-allocation-counts
generate-inspector-information
generate-instruction-counts
generate-interrupt-trap
generate-procedure-source-information
generate-wpo-files
gensym-count
gensym-prefix
heap-reserve-ratio
ieee
immutable
import-notify
interaction-environment
internal-defines-as-letrec*
keyboard-interrupt-handler
library-directories
library-extensions
library-search-handler
mutable
nongenerative
only
opaque
optimize-level
parent
parent-rtd
predicate
prefix
pretty-initial-indent
pretty-line-length
pretty-maximum-lines
pretty-one-line-limit
pretty-standard-indent
print-brackets
print-char-name
print-extended-identifiers
print-gensym
print-graph
print-length
print-level
print-precision
print-radix
print-record
print-unicode
print-vector-length
protocol
r5rs
r5rs-syntax
random-seed
release-minimum-generation
rename
require-nongenerative-clause
reset-handler
run-cp0
scheme
scheme-program
scheme-script
scheme-start
sealed
source-directories
subset-mode
suppress-greeting
timer-interrupt-handler
trace-output-port
trace-print
undefined-variable-warnings
variable
waiter-prompt-and-read
waiter-prompt-string
waiter-write
