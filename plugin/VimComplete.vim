function! VimScriptCompleteCache()
   let types = []
   let types += ['arglist']
   let types += ['augroup']
   let types += ['buffer']
   let types += ['behave']
   let types += ['color']
   let types += ['command']
   let types += ['compiler']
   let types += ['cscope']
   let types += ['dir']
   let types += ['environment']
   let types += ['event']
   let types += ['expression']
   let types += ['file']
   let types += ['file_in_path']
   let types += ['filetype']
   let types += ['function']
   let types += ['help']
   let types += ['highlight']
   let types += ['history']
   let types += ['locale']
   let types += ['mapclear']
   let types += ['mapping']
   let types += ['menu']
   let types += ['messages']
   let types += ['option']
   let types += ['packadd']
   let types += ['shellcmd']
   let types += ['sign']
   let types += ['syntax']
   let types += ['syntime']
   let types += ['tag']
   let types += ['tag_listfiles']
   let types += ['user']
   let types += ['var']
   let g:Complete_dict = {}
   for type in types
      try
         for name in getcompletion('', type)
            let name = split(name, '(')
            if len(name) > 0
            call DictionaryAdd(g:Complete_dict, name[0], type, '')
         endif
         endfor
      catch /E433/
      endtry
   endfor



   let funargs=''
   redir => funargs
   :silent function
   redir END
   for fd in split(funargs, "\n")
      let t = split(fd[9:], '(')
      if len(t) > 1
         call DictionaryAdd(g:Complete_dict, t[0], 'function', '(' .. t[1])
      end
   endfor


   call DictionaryAdd(g:Complete_dict, "abs", 'function', "({expr}) : Float or Number  absolute value of {expr}")
   call DictionaryAdd(g:Complete_dict, "acos", 'function', "({expr}) : Float	arc cosine of {expr}")
   call DictionaryAdd(g:Complete_dict, "add", 'function', "({object}, {item}) : List/Blob   append {item} to {object}")
   call DictionaryAdd(g:Complete_dict, "and", 'function', "({expr}, {expr}) : Number	bitwise AND")
   call DictionaryAdd(g:Complete_dict, "append", 'function', "({lnum}, {text}) : Number	append {text} below line {lnum}")
   call DictionaryAdd(g:Complete_dict, "appendbufline", 'function', "({expr}, {lnum}, {text}) : Number	append {text} below line {lnum} in buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "argc", 'function', "([{winid}]) : Number	number of files in the argument list")
   call DictionaryAdd(g:Complete_dict, "argidx", 'function', "() : Number	current index in the argument list")
   call DictionaryAdd(g:Complete_dict, "arglistid", 'function', "([{winnr} [, {tabnr}]]) : Number	argument list id")
   call DictionaryAdd(g:Complete_dict, "argv", 'function', "([-1, {winid}]) : List	the argument list")
   call DictionaryAdd(g:Complete_dict, "argv", 'function', "({nr} [, {winid}]) : String	{nr} entry of the argument list")
   call DictionaryAdd(g:Complete_dict, "asin", 'function', "({expr}) : Float	arc sine of {expr}")
   call DictionaryAdd(g:Complete_dict, "assert_beeps", 'function', "({cmd}) : Number	assert {cmd} causes a beep")
   call DictionaryAdd(g:Complete_dict, "assert_equal", 'function', "({exp}, {act} [, {msg}]) : Number	assert {exp} is equal to {act}")
   call DictionaryAdd(g:Complete_dict, "assert_equalfile", 'function', "({fname-one}, {fname-two}) : Number	assert file contents is equal")
   call DictionaryAdd(g:Complete_dict, "assert_exception", 'function', "({error} [, {msg}]) : Number	assert {error} is in v:exception")
   call DictionaryAdd(g:Complete_dict, "assert_fails", 'function', "({cmd} [, {error} [, {msg}]]) : Number	assert {cmd} fails")
   call DictionaryAdd(g:Complete_dict, "assert_false", 'function', "({actual} [, {msg}]) : Number	assert {actual} is false")
   call DictionaryAdd(g:Complete_dict, "assert_inrange", 'function', "({lower}, {upper}, {actual} [, {msg}]) : Number	assert {actual} is inside the range")
   call DictionaryAdd(g:Complete_dict, "assert_match", 'function', "({pat}, {text} [, {msg}]) : Number	assert {pat} matches {text}")
   call DictionaryAdd(g:Complete_dict, "assert_notequal", 'function', "({exp}, {act} [, {msg}]) : Number	assert {exp} is not equal {act}")
   call DictionaryAdd(g:Complete_dict, "assert_notmatch", 'function', "({pat}, {text} [, {msg}]) : Number	assert {pat} not matches {text}")
   call DictionaryAdd(g:Complete_dict, "assert_report", 'function', "({msg}) : Number	report a test failure")
   call DictionaryAdd(g:Complete_dict, "assert_true", 'function', "({actual} [, {msg}]) : Number	assert {actual} is true")
   call DictionaryAdd(g:Complete_dict, "atan", 'function', "({expr}) : Float	arc tangent of {expr}")
   call DictionaryAdd(g:Complete_dict, "atan2", 'function', "({expr1}, {expr2}) : Float	arc tangent of {expr1} / {expr2}")
   call DictionaryAdd(g:Complete_dict, "balloon_gettext", 'function', "() : String	current text in the balloon")
   call DictionaryAdd(g:Complete_dict, "balloon_show", 'function', "({expr}) : none	show {expr} inside the balloon")
   call DictionaryAdd(g:Complete_dict, "balloon_split", 'function', "({msg}) : List	split {msg} as used for a balloon")
   call DictionaryAdd(g:Complete_dict, "browse", 'function', "({save}, {title}, {initdir}, {default}) : String	put up a file requester")
   call DictionaryAdd(g:Complete_dict, "browsedir", 'function', "({title}, {initdir}) : String	put up a directory requester")
   call DictionaryAdd(g:Complete_dict, "bufadd", 'function', "({name}) : Number	add a buffer to the buffer list")
   call DictionaryAdd(g:Complete_dict, "bufexists", 'function', "({expr}) : Number	|TRUE| if buffer {expr} exists")
   call DictionaryAdd(g:Complete_dict, "buflisted", 'function', "({expr}) : Number	|TRUE| if buffer {expr} is listed")
   call DictionaryAdd(g:Complete_dict, "bufload", 'function', "({expr}) : Number	load buffer {expr} if not loaded yet")
   call DictionaryAdd(g:Complete_dict, "bufloaded", 'function', "({expr}) : Number	|TRUE| if buffer {expr} is loaded")
   call DictionaryAdd(g:Complete_dict, "bufname", 'function', "([{expr}]) : String	Name of the buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "bufnr", 'function', "([{expr} [, {create}]]) : Number	Number of the buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "bufwinid", 'function', "({expr}) : Number	window ID of buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "bufwinnr", 'function', "({expr}) : Number	window number of buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "byte2line", 'function', "({byte}) : Number	line number at byte count {byte}")
   call DictionaryAdd(g:Complete_dict, "byteidx", 'function', "({expr}, {nr}) : Number	byte index of {nr}'th char in {expr}")
   call DictionaryAdd(g:Complete_dict, "byteidxcomp", 'function', "({expr}, {nr}) : Number	byte index of {nr}'th char in {expr}")
   call DictionaryAdd(g:Complete_dict, "call", 'function', "({func}, {arglist} [, {dict}]) : any	call {func} with arguments {arglist}")
   call DictionaryAdd(g:Complete_dict, "ceil", 'function', "({expr}) : Float	round {expr} up")
   call DictionaryAdd(g:Complete_dict, "ch_canread", 'function', "({handle}) : Number	check if there is something to read")
   call DictionaryAdd(g:Complete_dict, "ch_close", 'function', "({handle}) : none	close {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_close_in", 'function', "({handle}) : none	close in part of {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_evalexpr", 'function', "({handle}, {expr} [, {options}]) : any	evaluate {expr} on JSON {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_evalraw", 'function', "({handle}, {string} [, {options}]) : any	evaluate {string} on raw {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_getbufnr", 'function', "({handle}, {what}) : Number	get buffer number for {handle}/{what}")
   call DictionaryAdd(g:Complete_dict, "ch_getjob", 'function', "({channel}) : Job	get the Job of {channel}")
   call DictionaryAdd(g:Complete_dict, "ch_info", 'function', "({handle}) : String	info about channel {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_log", 'function', "({msg} [, {handle}]) : none	write {msg} in the channel log file")
   call DictionaryAdd(g:Complete_dict, "ch_logfile", 'function', "({fname} [, {mode}]) : none	start logging channel activity")
   call DictionaryAdd(g:Complete_dict, "ch_open", 'function', "({address} [, {options}]) : Channel	open a channel to {address}")
   call DictionaryAdd(g:Complete_dict, "ch_read", 'function', "({handle} [, {options}]) : String	read from {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_readblob", 'function', "({handle} [, {options}]) : Blob	read Blob from {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_readraw", 'function', "({handle} [, {options}]) : String	read raw from {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_sendexpr", 'function', "({handle}, {expr} [, {options}]) : any	send {expr} over JSON {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_sendraw", 'function', "({handle}, {expr} [, {options}]) : any	send {expr} over raw {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_setoptions", 'function', "({handle}, {options}) : none	set options for {handle}")
   call DictionaryAdd(g:Complete_dict, "ch_status", 'function', "({handle} [, {options}]) : String	status of channel {handle}")
   call DictionaryAdd(g:Complete_dict, "changenr", 'function', "() : Number	current change number")
   call DictionaryAdd(g:Complete_dict, "char2nr", 'function', "({expr} [, {utf8}]) : Number	ASCII/UTF8 value of first char in {expr}")
   call DictionaryAdd(g:Complete_dict, "chdir", 'function', "({dir}) : String	change current working directory")
   call DictionaryAdd(g:Complete_dict, "cindent", 'function', "({lnum}) : Number	C indent for line {lnum}")
   call DictionaryAdd(g:Complete_dict, "clearmatches", 'function', "([{win}]) : none	clear all matches")
   call DictionaryAdd(g:Complete_dict, "col", 'function', "({expr}) : Number	column nr of cursor or mark")
   call DictionaryAdd(g:Complete_dict, "complete", 'function', "({startcol}, {matches}) : none	set Insert mode completion")
   call DictionaryAdd(g:Complete_dict, "complete_add", 'function', "({expr}) : Number	add completion match")
   call DictionaryAdd(g:Complete_dict, "complete_check", 'function', "() : Number	check for key typed during completion")
   call DictionaryAdd(g:Complete_dict, "complete_info", 'function', "([{what}]) : Dict	get current completion information")
   call DictionaryAdd(g:Complete_dict, "confirm", 'function', "({msg} [, {choices} [, {default} [, {type}]]]) : Number	number of choice picked by user")
   call DictionaryAdd(g:Complete_dict, "copy", 'function', "({expr}) : any	make a shallow copy of {expr}")
   call DictionaryAdd(g:Complete_dict, "cos", 'function', "({expr}) : Float	cosine of {expr}")
   call DictionaryAdd(g:Complete_dict, "cosh", 'function', "({expr}) : Float	hyperbolic cosine of {expr}")
   call DictionaryAdd(g:Complete_dict, "count", 'function', "({comp}, {expr} [, {ic} [, {start}]]) : Number	count how many {expr} are in {comp}")
   call DictionaryAdd(g:Complete_dict, "cscope_connection", 'function', "([{num}, {dbpath} [, {prepend}]]) : Number	checks existence of cscope connection")
   call DictionaryAdd(g:Complete_dict, "cursor", 'function', "({list}) : Number	move cursor to position in {list}")
   call DictionaryAdd(g:Complete_dict, "cursor", 'function', "({lnum}, {col} [, {off}]) : Number	move cursor to {lnum}, {col}, {off}")
   call DictionaryAdd(g:Complete_dict, "debugbreak", 'function', "({pid}) : Number  interrupt process being debugged")
   call DictionaryAdd(g:Complete_dict, "deepcopy", 'function', "({expr} [, {noref}]) : any	make a full copy of {expr}")
   call DictionaryAdd(g:Complete_dict, "delete", 'function', "({fname} [, {flags}]) : Number	delete the file or directory {fname}")
   call DictionaryAdd(g:Complete_dict, "deletebufline", 'function', "({expr}, {first} [, {last}]) : Number	delete lines from buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "did_filetype", 'function', "() : Number	|TRUE| if FileType autocmd event used")
   call DictionaryAdd(g:Complete_dict, "diff_filler", 'function', "({lnum}) : Number	diff filler lines about {lnum}")
   call DictionaryAdd(g:Complete_dict, "diff_hlID", 'function', "({lnum}, {col}) : Number	diff highlighting at {lnum}/{col}")
   call DictionaryAdd(g:Complete_dict, "empty", 'function', "({expr}) : Number	|TRUE| if {expr} is empty")
   call DictionaryAdd(g:Complete_dict, "environ", 'function', "() : Dict	return environment variables")
   call DictionaryAdd(g:Complete_dict, "escape", 'function', "({string}, {chars}) : String	escape {chars} in {string} with '\'")
   call DictionaryAdd(g:Complete_dict, "eval", 'function', "({string}) : any	evaluate {string} into its value")
   call DictionaryAdd(g:Complete_dict, "eventhandler", 'function', "() : Number	|TRUE| if inside an event handler")
   call DictionaryAdd(g:Complete_dict, "executable", 'function', "({expr}) : Number	1 if executable {expr} exists")
   call DictionaryAdd(g:Complete_dict, "execute", 'function', "({command}) : String	execute {command} and get the output")
   call DictionaryAdd(g:Complete_dict, "exepath", 'function', "({expr}) : String	full path of the command {expr}")
   call DictionaryAdd(g:Complete_dict, "exists", 'function', "({expr}) : Number	|TRUE| if {expr} exists")
   call DictionaryAdd(g:Complete_dict, "exp", 'function', "({expr}) : Float	exponential of {expr}")
   call DictionaryAdd(g:Complete_dict, "expand", 'function', "({expr} [, {nosuf} [, {list}]]) : any	expand special keywords in {expr}")
   call DictionaryAdd(g:Complete_dict, "expandcmd", 'function', "({expr}) : String	expand {expr} like with `:edit`")
   call DictionaryAdd(g:Complete_dict, "extend", 'function', "({expr1}, {expr2} [, {expr3}]) : List/Dict insert items of {expr2} into {expr1}")
   call DictionaryAdd(g:Complete_dict, "feedkeys", 'function', "({string} [, {mode}]) : Number	add key sequence to typeahead buffer")
   call DictionaryAdd(g:Complete_dict, "filereadable", 'function', "({file}) : Number	|TRUE| if {file} is a readable file")
   call DictionaryAdd(g:Complete_dict, "filewritable", 'function', "({file}) : Number	|TRUE| if {file} is a writable file")
   call DictionaryAdd(g:Complete_dict, "filter", 'function', "({expr1}, {expr2}) : List/Dict  remove items from {expr1} where {expr2} is 0")
   call DictionaryAdd(g:Complete_dict, "finddir", 'function', "({name} [, {path} [, {count}]]) : String	find directory {name} in {path}")
   call DictionaryAdd(g:Complete_dict, "findfile", 'function', "({name} [, {path} [, {count}]]) : String	find file {name} in {path}")
   call DictionaryAdd(g:Complete_dict, "float2nr", 'function', "({expr}) : Number	convert Float {expr} to a Number")
   call DictionaryAdd(g:Complete_dict, "floor", 'function', "({expr}) : Float	round {expr} down")
   call DictionaryAdd(g:Complete_dict, "fmod", 'function', "({expr1}, {expr2}) : Float	remainder of {expr1} / {expr2}")
   call DictionaryAdd(g:Complete_dict, "fnameescape", 'function', "({fname}) : String	escape special characters in {fname}")
   call DictionaryAdd(g:Complete_dict, "fnamemodify", 'function', "({fname}, {mods}) : String	modify file name")
   call DictionaryAdd(g:Complete_dict, "foldclosed", 'function', "({lnum}) : Number	first line of fold at {lnum} if closed")
   call DictionaryAdd(g:Complete_dict, "foldclosedend", 'function', "({lnum}) : Number	last line of fold at {lnum} if closed")
   call DictionaryAdd(g:Complete_dict, "foldlevel", 'function', "({lnum}) : Number	fold level at {lnum}")
   call DictionaryAdd(g:Complete_dict, "foldtext", 'function', "() : String	line displayed for closed fold")
   call DictionaryAdd(g:Complete_dict, "foldtextresult", 'function', "({lnum}) : String	text for closed fold at {lnum}")
   call DictionaryAdd(g:Complete_dict, "foreground", 'function', "() : Number	bring the Vim window to the foreground")
   call DictionaryAdd(g:Complete_dict, "funcref", 'function', "({name} [, {arglist}] [, {dict}]) : Funcref	reference to function {name}")
   call DictionaryAdd(g:Complete_dict, "function", 'function', "({name} [, {arglist}] [, {dict}]) : Funcref	named reference to function {name}")
   call DictionaryAdd(g:Complete_dict, "garbagecollect", 'function', "([{atexit}]) : none	free memory, breaking cyclic references")
   call DictionaryAdd(g:Complete_dict, "get", 'function', "({dict}, {key} [, {def}]) : any	get item {key} from {dict} or {def}")
   call DictionaryAdd(g:Complete_dict, "get", 'function', "({func}, {what}) : any	get property of funcref/partial {func}")
   call DictionaryAdd(g:Complete_dict, "get", 'function', "({list}, {idx} [, {def}]) : any	get item {idx} from {list} or {def}")
   call DictionaryAdd(g:Complete_dict, "getbufinfo", 'function', "([{expr}]) : List	information about buffers")
   call DictionaryAdd(g:Complete_dict, "getbufline", 'function', "({expr}, {lnum} [, {end}]) : List	lines {lnum} to {end} of buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "getbufvar", 'function', "({expr}, {varname} [, {def}]) : any	variable {varname} in buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "getchangelist", 'function', "([{expr}]) : List	list of change list items")
   call DictionaryAdd(g:Complete_dict, "getchar", 'function', "([expr]) : Number	get one character from the user")
   call DictionaryAdd(g:Complete_dict, "getcharmod", 'function', "() : Number	modifiers for the last typed character")
   call DictionaryAdd(g:Complete_dict, "getcharsearch", 'function', "() : Dict	last character search")
   call DictionaryAdd(g:Complete_dict, "getcmdline", 'function', "() : String	return the current command-line")
   call DictionaryAdd(g:Complete_dict, "getcmdpos", 'function', "() : Number	return cursor position in command-line")
   call DictionaryAdd(g:Complete_dict, "getcmdtype", 'function', "() : String	return current command-line type")
   call DictionaryAdd(g:Complete_dict, "getcmdwintype", 'function', "() : String	return current command-line window type")
   call DictionaryAdd(g:Complete_dict, "getcompletion", 'function', "({pat}, {type} [, {filtered}]) : List	list of cmdline completion matches")
   call DictionaryAdd(g:Complete_dict, "getcurpos", 'function', "() : List	position of the cursor")
   call DictionaryAdd(g:Complete_dict, "getcwd", 'function', "([{winnr} [, {tabnr}]]) : String	get the current working directory")
   call DictionaryAdd(g:Complete_dict, "getenv", 'function', "({name}) : String	return environment variable")
   call DictionaryAdd(g:Complete_dict, "getfontname", 'function', "([{name}]) : String	name of font being used")
   call DictionaryAdd(g:Complete_dict, "getfperm", 'function', "({fname}) : String	file permissions of file {fname}")
   call DictionaryAdd(g:Complete_dict, "getfsize", 'function', "({fname}) : Number	size in bytes of file {fname}")
   call DictionaryAdd(g:Complete_dict, "getftime", 'function', "({fname}) : Number	last modification time of file")
   call DictionaryAdd(g:Complete_dict, "getftype", 'function', "({fname}) : String	description of type of file {fname}")
   call DictionaryAdd(g:Complete_dict, "getimstatus", 'function', "() : Number	|TRUE| if the IME status is active")
   call DictionaryAdd(g:Complete_dict, "getjumplist", 'function', "([{winnr} [, {tabnr}]]) : List	list of jump list items")
   call DictionaryAdd(g:Complete_dict, "getline", 'function', "({lnum}) : String	line {lnum} of current buffer")
   call DictionaryAdd(g:Complete_dict, "getline", 'function', "({lnum}, {end}) : List	lines {lnum} to {end} of current buffer")
   call DictionaryAdd(g:Complete_dict, "getloclist", 'function', "({nr} [, {what}]) : List	list of location list items")
   call DictionaryAdd(g:Complete_dict, "getmatches", 'function', "([{win}]) : List	list of current matches")
   call DictionaryAdd(g:Complete_dict, "getmousepos", 'function', "() : Dict	last known mouse position")
   call DictionaryAdd(g:Complete_dict, "getpid", 'function', "() : Number	process ID of Vim")
   call DictionaryAdd(g:Complete_dict, "getpos", 'function', "({expr}) : List	position of cursor, mark, etc.")
   call DictionaryAdd(g:Complete_dict, "getqflist", 'function', "([{what}]) : List	list of quickfix items")
   call DictionaryAdd(g:Complete_dict, "getreg", 'function', "([{regname} [, 1 [, {list}]]]) : String or List   contents of register")
   call DictionaryAdd(g:Complete_dict, "getregtype", 'function', "([{regname}]) : String	type of register")
   call DictionaryAdd(g:Complete_dict, "gettabinfo", 'function', "([{expr}]) : List	list of tab pages")
   call DictionaryAdd(g:Complete_dict, "gettabvar", 'function', "({nr}, {varname} [, {def}]) : any	variable {varname} in tab {nr} or {def}")
   call DictionaryAdd(g:Complete_dict, "gettabwinvar", 'function', "({tabnr}, {winnr}, {name} [, {def}]) : any	{name} in {winnr} in tab page {tabnr}")
   call DictionaryAdd(g:Complete_dict, "gettagstack", 'function', "([{nr}]) : Dict	get the tag stack of window {nr}")
   call DictionaryAdd(g:Complete_dict, "getwininfo", 'function', "([{winid}]) : List	list of info about each window")
   call DictionaryAdd(g:Complete_dict, "getwinpos", 'function', "([{timeout}]) : List	X and Y coord in pixels of the Vim window")
   call DictionaryAdd(g:Complete_dict, "getwinposx", 'function', "() : Number	X coord in pixels of the Vim window")
   call DictionaryAdd(g:Complete_dict, "getwinposy", 'function', "() : Number	Y coord in pixels of the Vim window")
   call DictionaryAdd(g:Complete_dict, "getwinvar", 'function', "({nr}, {varname} [, {def}]) : any	variable {varname} in window {nr}")
   call DictionaryAdd(g:Complete_dict, "glob", 'function', "({expr} [, {nosuf} [, {list} [, {alllinks}]]]) : any	expand file wildcards in {expr}")
   call DictionaryAdd(g:Complete_dict, "glob2regpat", 'function', "({expr}) : String	convert a glob pat into a search pat")
   call DictionaryAdd(g:Complete_dict, "globpath", 'function', "({path}, {expr} [, {nosuf} [, {list} [, {alllinks}]]]) : String	do glob({expr}) for all dirs in {path}")
   call DictionaryAdd(g:Complete_dict, "has", 'function', "({feature}) : Number	|TRUE| if feature {feature} supported")
   call DictionaryAdd(g:Complete_dict, "has_key", 'function', "({dict}, {key}) : Number	|TRUE| if {dict} has entry {key}")
   call DictionaryAdd(g:Complete_dict, "haslocaldir", 'function', "([{winnr} [, {tabnr}]]) : Number	|TRUE| if the window executed |:lcd| or |:tcd|")
   call DictionaryAdd(g:Complete_dict, "hasmapto", 'function', "({what} [, {mode} [, {abbr}]]) : Number	|TRUE| if mapping to {what} exists")
   call DictionaryAdd(g:Complete_dict, "histadd", 'function', "({history}, {item}) : String	add an item to a history")
   call DictionaryAdd(g:Complete_dict, "histdel", 'function', "({history} [, {item}]) : String	remove an item from a history")
   call DictionaryAdd(g:Complete_dict, "histget", 'function', "({history} [, {index}]) : String	get the item {index} from a history")
   call DictionaryAdd(g:Complete_dict, "histnr", 'function', "({history}) : Number	highest index of a history")
   call DictionaryAdd(g:Complete_dict, "hlID", 'function', "({name}) : Number	syntax ID of highlight group {name}")
   call DictionaryAdd(g:Complete_dict, "hlexists", 'function', "({name}) : Number	|TRUE| if highlight group {name} exists")
   call DictionaryAdd(g:Complete_dict, "hostname", 'function', "() : String	name of the machine Vim is running on")
   call DictionaryAdd(g:Complete_dict, "iconv", 'function', "({expr}, {from}, {to}) : String	convert encoding of {expr}")
   call DictionaryAdd(g:Complete_dict, "indent", 'function', "({lnum}) : Number	indent of line {lnum}")
   call DictionaryAdd(g:Complete_dict, "index", 'function', "({object}, {expr} [, {start} [, {ic}]]) : Number	index in {object} where {expr} appears")
   call DictionaryAdd(g:Complete_dict, "input", 'function', "({prompt} [, {text} [, {completion}]]) : String	get input from the user")
   call DictionaryAdd(g:Complete_dict, "inputdialog", 'function', "({prompt} [, {text} [, {completion}]]) : String	like input() but in a GUI dialog")
   call DictionaryAdd(g:Complete_dict, "inputlist", 'function', "({textlist}) : Number	let the user pick from a choice list")
   call DictionaryAdd(g:Complete_dict, "inputrestore", 'function', "() : Number	restore typeahead")
   call DictionaryAdd(g:Complete_dict, "inputsave", 'function', "() : Number	save and clear typeahead")
   call DictionaryAdd(g:Complete_dict, "inputsecret", 'function', "({prompt} [, {text}]) : String	like input() but hiding the text")
   call DictionaryAdd(g:Complete_dict, "insert", 'function', "({object}, {item} [, {idx}]) : List	insert {item} in {object} [before {idx}]")
   call DictionaryAdd(g:Complete_dict, "interrupt", 'function', "() : none	interrupt script execution")
   call DictionaryAdd(g:Complete_dict, "invert", 'function', "({expr}) : Number	bitwise invert")
   call DictionaryAdd(g:Complete_dict, "isdirectory", 'function', "({directory}) : Number	|TRUE| if {directory} is a directory")
   call DictionaryAdd(g:Complete_dict, "isinf", 'function', "({expr}) : Number	determine if {expr} is infinity value (positive or negative)")
   call DictionaryAdd(g:Complete_dict, "islocked", 'function', "({expr}) : Number	|TRUE| if {expr} is locked")
   call DictionaryAdd(g:Complete_dict, "isnan", 'function', "({expr}) : Number	|TRUE| if {expr} is NaN")
   call DictionaryAdd(g:Complete_dict, "items", 'function', "({dict}) : List	key-value pairs in {dict}")
   call DictionaryAdd(g:Complete_dict, "job_getchannel", 'function', "({job}) : Channel	get the channel handle for {job}")
   call DictionaryAdd(g:Complete_dict, "job_info", 'function', "([{job}]) : Dict	get information about {job}")
   call DictionaryAdd(g:Complete_dict, "job_setoptions", 'function', "({job}, {options}) : none	set options for {job}")
   call DictionaryAdd(g:Complete_dict, "job_start", 'function', "({command} [, {options}]) : Job	start a job")
   call DictionaryAdd(g:Complete_dict, "job_status", 'function', "({job}) : String	get the status of {job}")
   call DictionaryAdd(g:Complete_dict, "job_stop", 'function', "({job} [, {how}]) : Number	stop {job}")
   call DictionaryAdd(g:Complete_dict, "join", 'function', "({list} [, {sep}]) : String	join {list} items into one String")
   call DictionaryAdd(g:Complete_dict, "js_decode", 'function', "({string}) : any	decode JS style JSON")
   call DictionaryAdd(g:Complete_dict, "js_encode", 'function', "({expr}) : String	encode JS style JSON")
   call DictionaryAdd(g:Complete_dict, "json_decode", 'function', "({string}) : any	decode JSON")
   call DictionaryAdd(g:Complete_dict, "json_encode", 'function', "({expr}) : String	encode JSON")
   call DictionaryAdd(g:Complete_dict, "keys", 'function', "({dict}) : List	keys in {dict}")
   call DictionaryAdd(g:Complete_dict, "len", 'function', "({expr}) : Number	the length of {expr}")
   call DictionaryAdd(g:Complete_dict, "libcall", 'function', "({lib}, {func}, {arg}) : String	call {func} in library {lib} with {arg}")
   call DictionaryAdd(g:Complete_dict, "libcallnr", 'function', "({lib}, {func}, {arg}) : Number	idem, but return a Number")
   call DictionaryAdd(g:Complete_dict, "line", 'function', "({expr} [, {winid}]) : Number	line nr of cursor, last line or mark")
   call DictionaryAdd(g:Complete_dict, "line2byte", 'function', "({lnum}) : Number	byte count of line {lnum}")
   call DictionaryAdd(g:Complete_dict, "lispindent", 'function', "({lnum}) : Number	Lisp indent for line {lnum}")
   call DictionaryAdd(g:Complete_dict, "list2str", 'function', "({list} [, {utf8}]) : String	turn numbers in {list} into a String")
   call DictionaryAdd(g:Complete_dict, "listener_add", 'function', "({callback} [, {buf}]) : Number	add a callback to listen to changes")
   call DictionaryAdd(g:Complete_dict, "listener_flush", 'function', "([{buf}]) : none	invoke listener callbacks")
   call DictionaryAdd(g:Complete_dict, "listener_remove", 'function', "({id}) : none	remove a listener callback")
   call DictionaryAdd(g:Complete_dict, "localtime", 'function', "() : Number	current time")
   call DictionaryAdd(g:Complete_dict, "log", 'function', "({expr}) : Float	natural logarithm (base e) of {expr}")
   call DictionaryAdd(g:Complete_dict, "log10", 'function', "({expr}) : Float	logarithm of Float {expr} to base 10")
   call DictionaryAdd(g:Complete_dict, "luaeval", 'function', "({expr} [, {expr}]) : any	evaluate |Lua| expression")
   call DictionaryAdd(g:Complete_dict, "map", 'function', "({expr1}, {expr2}) : List/Dict  change each item in {expr1} to {expr}")
   call DictionaryAdd(g:Complete_dict, "maparg", 'function', "({name} [, {mode} [, {abbr} [, {dict}]]]) : String or Dict rhs of mapping {name} in mode {mode}")
   call DictionaryAdd(g:Complete_dict, "mapcheck", 'function', "({name} [, {mode} [, {abbr}]]) : String	check for mappings matching {name}")
   call DictionaryAdd(g:Complete_dict, "match", 'function', "({expr}, {pat} [, {start} [, {count}]]) : Number	position where {pat} matches in {expr}")
   call DictionaryAdd(g:Complete_dict, "matchadd", 'function', "({group}, {pattern} [, {priority} [, {id} [, {dict}]]]) : Number	highlight {pattern} with {group}")
   call DictionaryAdd(g:Complete_dict, "matchaddpos", 'function', "({group}, {pos} [, {priority} [, {id} [, {dict}]]]) : Number	highlight positions with {group}")
   call DictionaryAdd(g:Complete_dict, "matcharg", 'function', "({nr}) : List	arguments of |:match|")
   call DictionaryAdd(g:Complete_dict, "matchdelete", 'function', "({id} [, {win}]) : Number	delete match identified by {id}")
   call DictionaryAdd(g:Complete_dict, "matchend", 'function', "({expr}, {pat} [, {start} [, {count}]]) : Number	position where {pat} ends in {expr}")
   call DictionaryAdd(g:Complete_dict, "matchlist", 'function', "({expr}, {pat} [, {start} [, {count}]]) : List	match and submatches of {pat} in {expr}")
   call DictionaryAdd(g:Complete_dict, "matchstr", 'function', "({expr}, {pat} [, {start} [, {count}]]) : String	{count}'th match of {pat} in {expr}")
   call DictionaryAdd(g:Complete_dict, "matchstrpos", 'function', "({expr}, {pat} [, {start} [, {count}]]) : List	{count}'th match of {pat} in {expr}")
   call DictionaryAdd(g:Complete_dict, "max", 'function', "({expr}) : Number	maximum value of items in {expr}")
   call DictionaryAdd(g:Complete_dict, "min", 'function', "({expr}) : Number	minimum value of items in {expr}")
   call DictionaryAdd(g:Complete_dict, "mkdir", 'function', "({name} [, {path} [, {prot}]]) : Number	create directory {name}")
   call DictionaryAdd(g:Complete_dict, "mode", 'function', "([expr]) : String	current editing mode")
   call DictionaryAdd(g:Complete_dict, "mzeval", 'function', "({expr}) : any	evaluate |MzScheme| expression")
   call DictionaryAdd(g:Complete_dict, "nextnonblank", 'function', "({lnum}) : Number	line nr of non-blank line >= {lnum}")
   call DictionaryAdd(g:Complete_dict, "nr2char", 'function', "({expr} [, {utf8}]) : String	single char with ASCII/UTF8 value {expr}")
   call DictionaryAdd(g:Complete_dict, "or", 'function', "({expr}, {expr}) : Number	bitwise OR")
   call DictionaryAdd(g:Complete_dict, "pathshorten", 'function', "({expr}) : String	shorten directory names in a path")
   call DictionaryAdd(g:Complete_dict, "perleval", 'function', "({expr}) : any	evaluate |Perl| expression")
   call DictionaryAdd(g:Complete_dict, "popup_atcursor", 'function', "({what}, {options}) : Number create popup window near the cursor")
   call DictionaryAdd(g:Complete_dict, "popup_beval", 'function', "({what}, {options}) : Number	create popup window for 'ballooneval'")
   call DictionaryAdd(g:Complete_dict, "popup_clear", 'function', "() : none	close all popup windows")
   call DictionaryAdd(g:Complete_dict, "popup_close", 'function', "({id} [, {result}]) : none	close popup window {id}")
   call DictionaryAdd(g:Complete_dict, "popup_create", 'function', "({what}, {options}) : Number	create a popup window")
   call DictionaryAdd(g:Complete_dict, "popup_dialog", 'function', "({what}, {options}) : Number	create a popup window used as a dialog")
   call DictionaryAdd(g:Complete_dict, "popup_filter_menu", 'function', "({id}, {key}) : Number	filter for a menu popup window")
   call DictionaryAdd(g:Complete_dict, "popup_filter_yesno", 'function', "({id}, {key}) : Number	filter for a dialog popup window")
   call DictionaryAdd(g:Complete_dict, "popup_findinfo", 'function', "() : Number	get window ID of info popup window")
   call DictionaryAdd(g:Complete_dict, "popup_findpreview", 'function', "() : Number	get window ID of preview popup window")
   call DictionaryAdd(g:Complete_dict, "popup_getoptions", 'function', "({id}) : Dict	get options of popup window {id}")
   call DictionaryAdd(g:Complete_dict, "popup_getpos", 'function', "({id}) : Dict	get position of popup window {id}")
   call DictionaryAdd(g:Complete_dict, "popup_hide", 'function', "({id}) : none	hide popup menu {id}")
   call DictionaryAdd(g:Complete_dict, "popup_menu", 'function', "({what}, {options}) : Number	create a popup window used as a menu")
   call DictionaryAdd(g:Complete_dict, "popup_move", 'function', "({id}, {options}) : none	set position of popup window {id}")
   call DictionaryAdd(g:Complete_dict, "popup_notification", 'function', "({what}, {options}) : Number	create a notification popup window")
   call DictionaryAdd(g:Complete_dict, "popup_setoptions", 'function', "({id}, {options}) : none	set options for popup window {id}")
   call DictionaryAdd(g:Complete_dict, "popup_settext", 'function', "({id}, {text}) : none	set the text of popup window {id}")
   call DictionaryAdd(g:Complete_dict, "popup_show", 'function', "({id}) : none	unhide popup window {id}")
   call DictionaryAdd(g:Complete_dict, "pow", 'function', "({x}, {y}) : Float	{x} to the power of {y}")
   call DictionaryAdd(g:Complete_dict, "prevnonblank", 'function', "({lnum}) : Number	line nr of non-blank line <= {lnum}")
   call DictionaryAdd(g:Complete_dict, "printf", 'function', "({fmt}, {expr1}...) : String	format text")
   call DictionaryAdd(g:Complete_dict, "prompt_setcallback", 'function', "({buf}, {expr}) : none	set prompt callback function")
   call DictionaryAdd(g:Complete_dict, "prompt_setinterrupt", 'function', "({buf}, {text}) : none	set prompt interrupt function")
   call DictionaryAdd(g:Complete_dict, "prompt_setprompt", 'function', "({buf}, {text}) : none	set prompt text")
   call DictionaryAdd(g:Complete_dict, "prop_add", 'function', "({lnum}, {col}, {props}) : none	add a text property")
   call DictionaryAdd(g:Complete_dict, "prop_clear", 'function', "({lnum} [, {lnum-end} [, {props}]]) : none	remove all text properties")
   call DictionaryAdd(g:Complete_dict, "prop_find", 'function', "({props} [, {direction}]) : Dict	search for a text property")
   call DictionaryAdd(g:Complete_dict, "prop_list", 'function', "({lnum} [, {props}) : List	text properties in {lnum}")
   call DictionaryAdd(g:Complete_dict, "prop_remove", 'function', "({props} [, {lnum} [, {lnum-end}]]) : Number	remove a text property")
   call DictionaryAdd(g:Complete_dict, "prop_type_add", 'function', "({name}, {props}) : none	define a new property type")
   call DictionaryAdd(g:Complete_dict, "prop_type_change", 'function', "({name}, {props}) : none	change an existing property type")
   call DictionaryAdd(g:Complete_dict, "prop_type_delete", 'function', "({name} [, {props}]) : none	delete a property type")
   call DictionaryAdd(g:Complete_dict, "prop_type_get", 'function', "([{name} [, {props}]) : Dict	get property type values")
   call DictionaryAdd(g:Complete_dict, "prop_type_list", 'function', "([{props}]) : List	get list of property types")
   call DictionaryAdd(g:Complete_dict, "pum_getpos", 'function', "() : Dict	position and size of pum if visible")
   call DictionaryAdd(g:Complete_dict, "pumvisible", 'function', "() : Number	whether popup menu is visible")
   call DictionaryAdd(g:Complete_dict, "py3eval", 'function', "({expr}) : any	evaluate |python3| expression")
   call DictionaryAdd(g:Complete_dict, "pyeval", 'function', "({expr}) : any	evaluate |Python| expression")
   call DictionaryAdd(g:Complete_dict, "pyxeval", 'function', "({expr}) : any	evaluate |python_x| expression")
   call DictionaryAdd(g:Complete_dict, "rand", 'function', "([{expr}]) : Number	get pseudo-random number")
   call DictionaryAdd(g:Complete_dict, "range", 'function', "({expr} [, {max} [, {stride}]]) : List	items from {expr} to {max}")
   call DictionaryAdd(g:Complete_dict, "readdir", 'function', "({dir} [, {expr}]) : List	file names in {dir} selected by {expr}")
   call DictionaryAdd(g:Complete_dict, "readfile", 'function', "({fname} [, {type} [, {max}]]) : List	get list of lines from file {fname}")
   call DictionaryAdd(g:Complete_dict, "reg_executing", 'function', "() : String	get the executing register name")
   call DictionaryAdd(g:Complete_dict, "reg_recording", 'function', "() : String	get the recording register name")
   call DictionaryAdd(g:Complete_dict, "reltime", 'function', "([{start} [, {end}]]) : List	get time value")
   call DictionaryAdd(g:Complete_dict, "reltimefloat", 'function', "({time}) : Float	turn the time value into a Float")
   call DictionaryAdd(g:Complete_dict, "reltimestr", 'function', "({time}) : String	turn time value into a String")
   call DictionaryAdd(g:Complete_dict, "remote_expr", 'function', "({server}, {string} [, {idvar} [, {timeout}]]) : String	send expression")
   call DictionaryAdd(g:Complete_dict, "remote_foreground", 'function', "({server}) : Number	bring Vim server to the foreground")
   call DictionaryAdd(g:Complete_dict, "remote_peek", 'function', "({serverid} [, {retvar}]) : Number	check for reply string")
   call DictionaryAdd(g:Complete_dict, "remote_read", 'function', "({serverid} [, {timeout}]) : String	read reply string")
   call DictionaryAdd(g:Complete_dict, "remote_send", 'function', "({server}, {string} [, {idvar}]) : String	send key sequence")
   call DictionaryAdd(g:Complete_dict, "remote_startserver", 'function', "({name}) : none	become server {name}")
   call DictionaryAdd(g:Complete_dict, "remove", 'function', "({blob}, {idx} [, {end}]) : Number/Blob remove bytes {idx}-{end} from {blob}")
   call DictionaryAdd(g:Complete_dict, "remove", 'function', "({dict}, {key}) : any	remove entry {key} from {dict}")
   call DictionaryAdd(g:Complete_dict, "remove", 'function', "({list}, {idx} [, {end}]) : any/List remove items {idx}-{end} from {list}")
   call DictionaryAdd(g:Complete_dict, "rename", 'function', "({from}, {to}) : Number	rename (move) file from {from} to {to}")
   call DictionaryAdd(g:Complete_dict, "repeat", 'function', "({expr}, {count}) : String	repeat {expr} {count} times")
   call DictionaryAdd(g:Complete_dict, "resolve", 'function', "({filename}) : String	get filename a shortcut points to")
   call DictionaryAdd(g:Complete_dict, "reverse", 'function', "({list}) : List	reverse {list} in-place")
   call DictionaryAdd(g:Complete_dict, "round", 'function', "({expr}) : Float	round off {expr}")
   call DictionaryAdd(g:Complete_dict, "rubyeval", 'function', "({expr}) : any	evaluate |Ruby| expression")
   call DictionaryAdd(g:Complete_dict, "screenattr", 'function', "({row}, {col}) : Number	attribute at screen position")
   call DictionaryAdd(g:Complete_dict, "screenchar", 'function', "({row}, {col}) : Number	character at screen position")
   call DictionaryAdd(g:Complete_dict, "screenchars", 'function', "({row}, {col}) : List	List of characters at screen position")
   call DictionaryAdd(g:Complete_dict, "screencol", 'function', "() : Number	current cursor column")
   call DictionaryAdd(g:Complete_dict, "screenpos", 'function', "({winid}, {lnum}, {col}) : Dict	screen row and col of a text character")
   call DictionaryAdd(g:Complete_dict, "screenrow", 'function', "() : Number	current cursor row")
   call DictionaryAdd(g:Complete_dict, "screenstring", 'function', "({row}, {col}) : String	characters at screen position")
   call DictionaryAdd(g:Complete_dict, "search", 'function', "({pattern} [, {flags} [, {stopline} [, {timeout}]]]) : Number	search for {pattern}")
   call DictionaryAdd(g:Complete_dict, "searchdecl", 'function', "({name} [, {global} [, {thisblock}]]) : Number	search for variable declaration")
   call DictionaryAdd(g:Complete_dict, "searchpair", 'function', "({start}, {middle}, {end} [, {flags} [, {skip} [...]]]) : Number	search for other end of start/end pair")
   call DictionaryAdd(g:Complete_dict, "searchpairpos", 'function', "({start}, {middle}, {end} [, {flags} [, {skip} [...]]]) : List	search for other end of start/end pair")
   call DictionaryAdd(g:Complete_dict, "searchpos", 'function', "({pattern} [, {flags} [, {stopline} [, {timeout}]]]) : List	search for {pattern}")
   call DictionaryAdd(g:Complete_dict, "server2client", 'function', "({clientid}, {string}) : Number	send reply string")
   call DictionaryAdd(g:Complete_dict, "serverlist", 'function', "() : String	get a list of available servers")
   call DictionaryAdd(g:Complete_dict, "setbufline", 'function', "({expr}, {lnum}, {text}) : Number	set line {lnum} to {text} in buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "setbufvar", 'function', "({expr}, {varname}, {val}) : none	set {varname} in buffer {expr} to {val}")
   call DictionaryAdd(g:Complete_dict, "setcharsearch", 'function', "({dict}) : Dict	set character search from {dict}")
   call DictionaryAdd(g:Complete_dict, "setcmdpos", 'function', "({pos}) : Number	set cursor position in command-line")
   call DictionaryAdd(g:Complete_dict, "setenv", 'function', "({name}, {val}) : none	set environment variable")
   call DictionaryAdd(g:Complete_dict, "setfperm", 'function', "({fname}, {mode}) : Number	set {fname} file permissions to {mode}")
   call DictionaryAdd(g:Complete_dict, "setline", 'function', "({lnum}, {line}) : Number	set line {lnum} to {line}")
   call DictionaryAdd(g:Complete_dict, "setloclist", 'function', "({nr}, {list} [, {action} [, {what}]]) : Number	modify location list using {list}")
   call DictionaryAdd(g:Complete_dict, "setmatches", 'function', "({list} [, {win}]) : Number	restore a list of matches")
   call DictionaryAdd(g:Complete_dict, "setpos", 'function', "({expr}, {list}) : Number	set the {expr} position to {list}")
   call DictionaryAdd(g:Complete_dict, "setqflist", 'function', "({list} [, {action} [, {what}]]) : Number	modify quickfix list using {list}")
   call DictionaryAdd(g:Complete_dict, "setreg", 'function', "({n}, {v} [, {opt}]) : Number	set register to value and type")
   call DictionaryAdd(g:Complete_dict, "settabvar", 'function', "({nr}, {varname}, {val}) : none	set {varname} in tab page {nr} to {val}")
   call DictionaryAdd(g:Complete_dict, "settabwinvar", 'function', "({tabnr}, {winnr}, {varname}, {val}) : none	set {varname} in window {winnr} in tab page {tabnr} to {val}")
   call DictionaryAdd(g:Complete_dict, "settagstack", 'function', "({nr}, {dict} [, {action}]) : Number	modify tag stack using {dict}")
   call DictionaryAdd(g:Complete_dict, "setwinvar", 'function', "({nr}, {varname}, {val}) : none	set {varname} in window {nr} to {val}")
   call DictionaryAdd(g:Complete_dict, "sha256", 'function', "({string}) : String	SHA256 checksum of {string}")
   call DictionaryAdd(g:Complete_dict, "shellescape", 'function', "({string} [, {special}]) : String	escape {string} for use as shell command argument")
   call DictionaryAdd(g:Complete_dict, "shiftwidth", 'function', "([{col}]) : Number	effective value of 'shiftwidth'")
   call DictionaryAdd(g:Complete_dict, "sign_define", 'function', "({list}) : List	define or update a list of signs")
   call DictionaryAdd(g:Complete_dict, "sign_define", 'function', "({name} [, {dict}]) : Number	define or update a sign")
   call DictionaryAdd(g:Complete_dict, "sign_getdefined", 'function', "([{name}]) : List	get a list of defined signs")
   call DictionaryAdd(g:Complete_dict, "sign_getplaced", 'function', "([{expr} [, {dict}]]) : List	get a list of placed signs")
   call DictionaryAdd(g:Complete_dict, "sign_jump", 'function', "({id}, {group}, {expr}) : Number	jump to a sign")
   call DictionaryAdd(g:Complete_dict, "sign_place", 'function', "({id}, {group}, {name}, {expr} [, {dict}]) : Number	place a sign")
   call DictionaryAdd(g:Complete_dict, "sign_placelist", 'function', "({list}) : List	place a list of signs")
   call DictionaryAdd(g:Complete_dict, "sign_undefine", 'function', "([{name}]) : Number	undefine a sign")
   call DictionaryAdd(g:Complete_dict, "sign_undefine", 'function', "({list}) : List	undefine a list of signs")
   call DictionaryAdd(g:Complete_dict, "sign_unplace", 'function', "({group} [, {dict}]) : Number	unplace a sign")
   call DictionaryAdd(g:Complete_dict, "sign_unplacelist", 'function', "({list}) : List	unplace a list of signs")
   call DictionaryAdd(g:Complete_dict, "simplify", 'function', "({filename}) : String	simplify filename as much as possible")
   call DictionaryAdd(g:Complete_dict, "sin", 'function', "({expr}) : Float	sine of {expr}")
   call DictionaryAdd(g:Complete_dict, "sinh", 'function', "({expr}) : Float	hyperbolic sine of {expr}")
   call DictionaryAdd(g:Complete_dict, "sort", 'function', "({list} [, {func} [, {dict}]]) : List	sort {list}, using {func} to compare")
   call DictionaryAdd(g:Complete_dict, "sound_clear", 'function', "() : none	stop playing all sounds")
   call DictionaryAdd(g:Complete_dict, "sound_playevent", 'function', "({name} [, {callback}]) : Number	play an event sound")
   call DictionaryAdd(g:Complete_dict, "sound_playfile", 'function', "({path} [, {callback}]) : Number	play sound file {path}")
   call DictionaryAdd(g:Complete_dict, "sound_stop", 'function', "({id}) : none	stop playing sound {id}")
   call DictionaryAdd(g:Complete_dict, "soundfold", 'function', "({word}) : String	sound-fold {word}")
   call DictionaryAdd(g:Complete_dict, "spellbadword", 'function', "() : String	badly spelled word at cursor")
   call DictionaryAdd(g:Complete_dict, "spellsuggest", 'function', "({word} [, {max} [, {capital}]]) : List	spelling suggestions")
   call DictionaryAdd(g:Complete_dict, "split", 'function', "({expr} [, {pat} [, {keepempty}]]) : List	make |List| from {pat} separated {expr}")
   call DictionaryAdd(g:Complete_dict, "sqrt", 'function', "({expr}) : Float	square root of {expr}")
   call DictionaryAdd(g:Complete_dict, "srand", 'function', "([{expr}]) : List	get seed for |rand()|")
   call DictionaryAdd(g:Complete_dict, "state", 'function', "([{what}]) : String	current state of Vim")
   call DictionaryAdd(g:Complete_dict, "str2float", 'function', "({expr}) : Float	convert String to Float")
   call DictionaryAdd(g:Complete_dict, "str2list", 'function', "({expr} [, {utf8}]) : List	convert each character of {expr} to ASCII/UTF8 value")
   call DictionaryAdd(g:Complete_dict, "str2nr", 'function', "({expr} [, {base} [, {quoted}]]) : Number	convert String to Number")
   call DictionaryAdd(g:Complete_dict, "strcharpart", 'function', "({str}, {start} [, {len}]) : String	{len} characters of {str} at {start}")
   call DictionaryAdd(g:Complete_dict, "strchars", 'function', "({expr} [, {skipcc}]) : Number	character length of the String {expr}")
   call DictionaryAdd(g:Complete_dict, "strdisplaywidth", 'function', "({expr} [, {col}]) : Number display length of the String {expr}")
   call DictionaryAdd(g:Complete_dict, "strftime", 'function', "({format} [, {time}]) : String	format time with a specified format")
   call DictionaryAdd(g:Complete_dict, "strgetchar", 'function', "({str}, {index}) : Number	get char {index} from {str}")
   call DictionaryAdd(g:Complete_dict, "stridx", 'function', "({haystack}, {needle} [, {start}]) : Number	index of {needle} in {haystack}")
   call DictionaryAdd(g:Complete_dict, "string", 'function', "({expr}) : String	String representation of {expr} value")
   call DictionaryAdd(g:Complete_dict, "strlen", 'function', "({expr}) : Number	length of the String {expr}")
   call DictionaryAdd(g:Complete_dict, "strpart", 'function', "({str}, {start} [, {len}]) : String	{len} characters of {str} at {start}")
   call DictionaryAdd(g:Complete_dict, "strptime", 'function', "({format}, {timestring}) : Number	Convert {timestring} to unix timestamp")
   call DictionaryAdd(g:Complete_dict, "strridx", 'function', "({haystack}, {needle} [, {start}]) : Number	last index of {needle} in {haystack}")
   call DictionaryAdd(g:Complete_dict, "strtrans", 'function', "({expr}) : String	translate string to make it printable")
   call DictionaryAdd(g:Complete_dict, "strwidth", 'function', "({expr}) : Number	display cell length of the String {expr}")
   call DictionaryAdd(g:Complete_dict, "submatch", 'function', "({nr} [, {list}]) : String or List specific match in ':s' or substitute()")
   call DictionaryAdd(g:Complete_dict, "substitute", 'function', "({expr}, {pat}, {sub}, {flags}) : String	all {pat} in {expr} replaced with {sub}")
   call DictionaryAdd(g:Complete_dict, "swapinfo", 'function', "({fname}) : Dict	information about swap file {fname}")
   call DictionaryAdd(g:Complete_dict, "swapname", 'function', "({expr}) : String	swap file of buffer {expr}")
   call DictionaryAdd(g:Complete_dict, "synID", 'function', "({lnum}, {col}, {trans}) : Number	syntax ID at {lnum} and {col}")
   call DictionaryAdd(g:Complete_dict, "synIDattr", 'function', "({synID}, {what} [, {mode}]) : String	attribute {what} of syntax ID {synID}")
   call DictionaryAdd(g:Complete_dict, "synIDtrans", 'function', "({synID}) : Number	translated syntax ID of {synID}")
   call DictionaryAdd(g:Complete_dict, "synconcealed", 'function', "({lnum}, {col}) : List	info about concealing")
   call DictionaryAdd(g:Complete_dict, "synstack", 'function', "({lnum}, {col}) : List	stack of syntax IDs at {lnum} and {col}")
   call DictionaryAdd(g:Complete_dict, "system", 'function', "({expr} [, {input}]) : String	output of shell command/filter {expr}")
   call DictionaryAdd(g:Complete_dict, "systemlist", 'function', "({expr} [, {input}]) : List	output of shell command/filter {expr}")
   call DictionaryAdd(g:Complete_dict, "tabpagebuflist", 'function', "([{arg}]) : List	list of buffer numbers in tab page")
   call DictionaryAdd(g:Complete_dict, "tabpagenr", 'function', "([{arg}]) : Number	number of current or last tab page")
   call DictionaryAdd(g:Complete_dict, "tabpagewinnr", 'function', "({tabarg} [, {arg}]) : Number	number of current window in tab page")
   call DictionaryAdd(g:Complete_dict, "tagfiles", 'function', "() : List	tags files used")
   call DictionaryAdd(g:Complete_dict, "taglist", 'function', "({expr} [, {filename}]) : List	list of tags matching {expr}")
   call DictionaryAdd(g:Complete_dict, "tan", 'function', "({expr}) : Float	tangent of {expr}")
   call DictionaryAdd(g:Complete_dict, "tanh", 'function', "({expr}) : Float	hyperbolic tangent of {expr}")
   call DictionaryAdd(g:Complete_dict, "tempname", 'function', "() : String	name for a temporary file")
   call DictionaryAdd(g:Complete_dict, "term_dumpdiff", 'function', "({filename}, {filename} [, {options}]) : Number  display difference between two dumps")
   call DictionaryAdd(g:Complete_dict, "term_dumpload", 'function', "({filename} [, {options}]) : Number	displaying a screen dump")
   call DictionaryAdd(g:Complete_dict, "term_dumpwrite", 'function', "({buf}, {filename} [, {options}]) : none	dump terminal window contents")
   call DictionaryAdd(g:Complete_dict, "term_getaltscreen", 'function', "({buf}) : Number	get the alternate screen flag")
   call DictionaryAdd(g:Complete_dict, "term_getansicolors", 'function', "({buf}) : List	get ANSI palette in GUI color mode")
   call DictionaryAdd(g:Complete_dict, "term_getattr", 'function', "({attr}, {what}) : Number	get the value of attribute {what}")
   call DictionaryAdd(g:Complete_dict, "term_getcursor", 'function', "({buf}) : List	get the cursor position of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_getjob", 'function', "({buf}) : Job	get the job associated with a terminal")
   call DictionaryAdd(g:Complete_dict, "term_getline", 'function', "({buf}, {row}) : String	get a line of text from a terminal")
   call DictionaryAdd(g:Complete_dict, "term_getscrolled", 'function', "({buf}) : Number	get the scroll count of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_getsize", 'function', "({buf}) : List	get the size of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_getstatus", 'function', "({buf}) : String	get the status of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_gettitle", 'function', "({buf}) : String	get the title of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_gettty", 'function', "({buf}, [{input}]) : String	get the tty name of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_list", 'function', "() : List	get the list of terminal buffers")
   call DictionaryAdd(g:Complete_dict, "term_scrape", 'function', "({buf}, {row}) : List	get row of a terminal screen")
   call DictionaryAdd(g:Complete_dict, "term_sendkeys", 'function', "({buf}, {keys}) : none	send keystrokes to a terminal")
   call DictionaryAdd(g:Complete_dict, "term_setansicolors", 'function', "({buf}, {colors}) : none	set ANSI palette in GUI color mode")
   call DictionaryAdd(g:Complete_dict, "term_setapi", 'function', "({buf}, {expr}) : none	set |terminal-api| function name prefix")
   call DictionaryAdd(g:Complete_dict, "term_setkill", 'function', "({buf}, {how}) : none	set signal to stop job in terminal")
   call DictionaryAdd(g:Complete_dict, "term_setrestore", 'function', "({buf}, {command}) : none	set command to restore terminal")
   call DictionaryAdd(g:Complete_dict, "term_setsize", 'function', "({buf}, {rows}, {cols}) : none	set the size of a terminal")
   call DictionaryAdd(g:Complete_dict, "term_start", 'function', "({cmd} [, {options}]) : Number	open a terminal window and run a job")
   call DictionaryAdd(g:Complete_dict, "term_wait", 'function', "({buf} [, {time}]) : Number  wait for screen to be updated")
   call DictionaryAdd(g:Complete_dict, "test_alloc_fail", 'function', "({id}, {countdown}, {repeat}) : none	make memory allocation fail")
   call DictionaryAdd(g:Complete_dict, "test_autochdir", 'function', "() : none	enable 'autochdir' during startup")
   call DictionaryAdd(g:Complete_dict, "test_feedinput", 'function', "({string}) : none	add key sequence to input buffer")
   call DictionaryAdd(g:Complete_dict, "test_garbagecollect_now", 'function', "() : none	free memory right now for testing")
   call DictionaryAdd(g:Complete_dict, "test_garbagecollect_soon", 'function', "() : none	free memory soon for testing")
   call DictionaryAdd(g:Complete_dict, "test_getvalue", 'function', "({string}) : any	get value of an internal variable")
   call DictionaryAdd(g:Complete_dict, "test_ignore_error", 'function', "({expr}) : none	ignore a specific error")
   call DictionaryAdd(g:Complete_dict, "test_null_blob", 'function', "() : Blob	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_null_channel", 'function', "() : Channel	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_null_dict", 'function', "() : Dict	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_null_job", 'function', "() : Job	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_null_list", 'function', "() : List	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_null_partial", 'function', "() : Funcref	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_null_string", 'function', "() : String	null value for testing")
   call DictionaryAdd(g:Complete_dict, "test_option_not_set", 'function', "({name}) : none	reset flag indicating option was set")
   call DictionaryAdd(g:Complete_dict, "test_override", 'function', "({expr}, {val}) : none	test with Vim internal overrides")
   call DictionaryAdd(g:Complete_dict, "test_refcount", 'function', "({expr}) : Number	get the reference count of {expr}")
   call DictionaryAdd(g:Complete_dict, "test_scrollbar", 'function', "({which}, {value}, {dragging}) : none	scroll in the GUI for testing")
   call DictionaryAdd(g:Complete_dict, "test_setmouse", 'function', "({row}, {col}) : none	set the mouse position for testing")
   call DictionaryAdd(g:Complete_dict, "test_settime", 'function', "({expr}) : none	set current time for testing")
   call DictionaryAdd(g:Complete_dict, "timer_info", 'function', "([{id}]) : List	information about timers")
   call DictionaryAdd(g:Complete_dict, "timer_pause", 'function', "({id}, {pause}) : none	pause or unpause a timer")
   call DictionaryAdd(g:Complete_dict, "timer_start", 'function', "({time}, {callback} [, {options}]) : Number	create a timer")
   call DictionaryAdd(g:Complete_dict, "timer_stop", 'function', "({timer}) : none	stop a timer")
   call DictionaryAdd(g:Complete_dict, "timer_stopall", 'function', "() : none	stop all timers")
   call DictionaryAdd(g:Complete_dict, "tolower", 'function', "({expr}) : String	the String {expr} switched to lowercase")
   call DictionaryAdd(g:Complete_dict, "toupper", 'function', "({expr}) : String	the String {expr} switched to uppercase")
   call DictionaryAdd(g:Complete_dict, "tr", 'function', "({src}, {fromstr}, {tostr}) : String	translate chars of {src} in {fromstr} to chars in {tostr}")
   call DictionaryAdd(g:Complete_dict, "trim", 'function', "({text} [, {mask}]) : String	trim characters in {mask} from {text}")
   call DictionaryAdd(g:Complete_dict, "trunc", 'function', "({expr}) : Float	truncate Float {expr}")
   call DictionaryAdd(g:Complete_dict, "type", 'function', "({name}) : Number	type of variable {name}")
   call DictionaryAdd(g:Complete_dict, "undofile", 'function', "({name}) : String	undo file name for {name}")
   call DictionaryAdd(g:Complete_dict, "undotree", 'function', "() : List	undo file tree")
   call DictionaryAdd(g:Complete_dict, "uniq", 'function', "({list} [, {func} [, {dict}]]) : List	remove adjacent duplicates from a list")
   call DictionaryAdd(g:Complete_dict, "values", 'function', "({dict}) : List	values in {dict}")
   call DictionaryAdd(g:Complete_dict, "virtcol", 'function', "({expr}) : Number	screen column of cursor or mark")
   call DictionaryAdd(g:Complete_dict, "visualmode", 'function', "([expr]) : String	last visual mode used")
   call DictionaryAdd(g:Complete_dict, "wildmenumode", 'function', "() : Number	whether 'wildmenu' mode is active")
   call DictionaryAdd(g:Complete_dict, "win_execute", 'function', "({id}, {command} [, {silent}]) : String	execute {command} in window {id}")
   call DictionaryAdd(g:Complete_dict, "win_findbuf", 'function', "({bufnr}) : List	find windows containing {bufnr}")
   call DictionaryAdd(g:Complete_dict, "win_getid", 'function', "([{win} [, {tab}]]) : Number	get window ID for {win} in {tab}")
   call DictionaryAdd(g:Complete_dict, "win_gotoid", 'function', "({expr}) : Number	go to window with ID {expr}")
   call DictionaryAdd(g:Complete_dict, "win_id2tabwin", 'function', "({expr}) : List	get tab and window nr from window ID")
   call DictionaryAdd(g:Complete_dict, "win_id2win", 'function', "({expr}) : Number	get window nr from window ID")
   call DictionaryAdd(g:Complete_dict, "win_screenpos", 'function', "({nr}) : List	get screen position of window {nr}")
   call DictionaryAdd(g:Complete_dict, "win_splitmove", 'function', "({nr}, {target} [, {options}]) : Number	move window {nr} to split of {target}")
   call DictionaryAdd(g:Complete_dict, "winbufnr", 'function', "({nr}) : Number	buffer number of window {nr}")
   call DictionaryAdd(g:Complete_dict, "wincol", 'function', "() : Number	window column of the cursor")
   call DictionaryAdd(g:Complete_dict, "winheight", 'function', "({nr}) : Number	height of window {nr}")
   call DictionaryAdd(g:Complete_dict, "winlayout", 'function', "([{tabnr}]) : List	layout of windows in tab {tabnr}")
   call DictionaryAdd(g:Complete_dict, "winline", 'function', "() : Number	window line of the cursor")
   call DictionaryAdd(g:Complete_dict, "winnr", 'function', "([{expr}]) : Number	number of current window")
   call DictionaryAdd(g:Complete_dict, "winrestcmd", 'function', "() : String	returns command to restore window sizes")
   call DictionaryAdd(g:Complete_dict, "winrestview", 'function', "({dict}) : none	restore view of current window")
   call DictionaryAdd(g:Complete_dict, "winsaveview", 'function', "() : Dict	save view of current window")
   call DictionaryAdd(g:Complete_dict, "winwidth", 'function', "({nr}) : Number	width of window {nr}")
   call DictionaryAdd(g:Complete_dict, "wordcount", 'function', "() : Dict	get byte/char/word statistics")
   call DictionaryAdd(g:Complete_dict, "writefile", 'function', "({object}, {fname} [, {flags}]) : Number	write |Blob| or |List| of lines to file")
   call DictionaryAdd(g:Complete_dict, "xor", 'function', "({expr}, {expr}) : Number	bitwise XOR")
endfunction
