let SchemeDoc = {
	\"#%variable": 'syntax',
	\"#'template": 'syntax',
	\"#,@template": 'syntax',
	\"#,template": 'syntax',
	\"#2%variable": 'syntax',
	\"#3%variable": 'syntax',
	\"#`template": 'syntax',
	\"$primitive": '($primitive variable) ($primitive 2 variable) ($primitive 3 variable)',
	\"$system": 'module',
	\"&assertion": 'syntax',
	\"&condition": 'syntax',
	\"&continuation": 'syntax',
	\"&error": 'syntax',
	\"&format": 'syntax',
	\"&i/o": 'syntax',
	\"&i/o-decoding": 'syntax',
	\"&i/o-encoding": 'syntax',
	\"&i/o-file-already-exists": 'syntax',
	\"&i/o-file-does-not-exist": 'syntax',
	\"&i/o-file-is-read-only": 'syntax',
	\"&i/o-file-protection": 'syntax',
	\"&i/o-filename": 'syntax',
	\"&i/o-invalid-position": 'syntax',
	\"&i/o-port": 'syntax',
	\"&i/o-read": 'syntax',
	\"&i/o-write": 'syntax',
	\"&implementation-restriction": 'syntax',
	\"&irritants": 'syntax',
	\"&lexical": 'syntax',
	\"&message": 'syntax',
	\"&no-infinities": 'syntax',
	\"&no-nans": 'syntax',
	\"&non-continuable": 'syntax',
	\"&serious": 'syntax',
	\"&source": 'syntax',
	\"&syntax": 'syntax',
	\"&undefined": 'syntax',
	\"&violation": 'syntax',
	\"&warning": 'syntax',
	\"&who": 'syntax',
	\"'obj": 'syntax',
	\"*": '(* num ...)',
	\"+": '(+ num ...)',
	\",@obj": 'syntax',
	\",obj": 'syntax',
	\"-": '(- num) (- num1 num2 num3 ...)',
	\"-1+": '(-1+ num)',
	\"...": 'syntax',
	\"/": '(/ num) (/ num1 num2 num3 ...)',
	\"1+": '(1+ num)',
	\"1-": '(1- num)',
	\"<": '(< real1 real2 real3 ...)',
	\"<=": '(<= real1 real2 real3 ...)',
	\"=": '(= num1 num2 num3 ...)',
	\"=>": 'syntax',
	\">": '(> real1 real2 real3 ...)',
	\">=": '(>= real1 real2 real3 ...)',
	\"_": 'syntax',
	\"`obj": 'syntax',
	\"abort": '(abort obj)',
	\"abort)": '(abort)',
	\"abort-handler": 'thread param',
	\"abs": '(abs real)',
	\"acos": '(acos num)',
	\"acosh": '(acosh num)',
	\"add-duration": '(add-duration time timed)',
	\"add-duration!": '(add-duration! time timed)',
	\"add-prefix": 'syntax',
	\"add1": '(add1 num)',
	\"alias": 'syntax (alias id1 id2)',
	\"and": '(and expr ...)',
	\"andmap": '(andmap procedure list1 list2 ...)',
	\"angle": '(angle num)',
	\"annotation-expression": '(annotation-expression annotation)',
	\"annotation-option-set": '(annotation-option-set symbol ...)',
	\"annotation-options": '(annotation-options annotation)',
	\"annotation-source": '(annotation-source annotation)',
	\"annotation-stripped": '(annotation-stripped annotation)',
	\"annotation?": '(annotation? obj)',
	\"append": '(append list ... obj)',
	\"append!": '(append! list ...)',
	\"append)": '(append)',
	\"apply": '(apply procedure obj ... list)',
	\"apropos": '(apropos s) (apropos s env)',
	\"apropos-list": '(apropos-list s) (apropos-list s env)',
	\"ash": '(ash int count)',
	\"asin": '(asin num)',
	\"asinh": '(asinh num)',
	\"assert": '(assert expression)',
	\"assertion-violation": '(assertion-violation who msg irritant ...)',
	\"assertion-violation?": '(assertion-violation? obj)',
	\"assertion-violationf": '(assertion-violationf who msg irritant ...)',
	\"assoc": '(assoc obj alist)',
	\"assp": '(assp procedure alist)',
	\"assq": '(assq obj alist)',
	\"assv": '(assv obj alist)',
	\"atan": '(atan num) (atan real1 real2)',
	\"atanh": '(atanh num)',
	\"atom?": '(atom? obj)',
	\"base-exception-handler": 'thread param',
	\"begin": '(begin expr1 expr2 ...)',
	\"bignum?": '(bignum? obj)',
	\"binary-port-input-buffer": '(binary-port-input-buffer binary-input-port)',
	\"binary-port-input-count": '(binary-port-input-count binary-input-port)',
	\"binary-port-input-index": '(binary-port-input-index binary-input-port)',
	\"binary-port-input-size": '(binary-port-input-size binary-input-port)',
	\"binary-port-output-buffer": '(binary-port-output-buffer output-port)',
	\"binary-port-output-count": '(binary-port-output-count binary-output-port)',
	\"binary-port-output-index": '(binary-port-output-index output-port)',
	\"binary-port-output-size": '(binary-port-output-size output-port)',
	\"binary-port?": '(binary-port? obj)',
	\"bitwise-and": '(bitwise-and exint ...)',
	\"bitwise-arithmetic-shift": '(bitwise-arithmetic-shift exint1 exint2)',
	\"bitwise-arithmetic-shift-left": '(bitwise-arithmetic-shift-left exint1 exint2)',
	\"bitwise-arithmetic-shift-right": '(bitwise-arithmetic-shift-right exint1 exint2)',
	\"bitwise-bit-count": '(bitwise-bit-count exint)',
	\"bitwise-bit-field": '(bitwise-bit-field exint1 exint2 exint3)',
	\"bitwise-bit-set?": '(bitwise-bit-set? exint1 exint2)',
	\"bitwise-copy-bit": '(bitwise-copy-bit exint1 exint2 exint3)',
	\"bitwise-copy-bit-field": '(bitwise-copy-bit-field exint1 exint2 exint3 exint4)',
	\"bitwise-first-bit-set": '(bitwise-first-bit-set exint)',
	\"bitwise-if": '(bitwise-if exint1 exint2 exint3)',
	\"bitwise-ior": '(bitwise-ior exint ...)',
	\"bitwise-length": '(bitwise-length exint)',
	\"bitwise-not": '(bitwise-not exint)',
	\"bitwise-reverse-bit-field": '(bitwise-reverse-bit-field exint1 exint2 exint3)',
	\"bitwise-rotate-bit-field": '(bitwise-rotate-bit-field exint1 exint2 exint3 exint4)',
	\"bitwise-xor": '(bitwise-xor exint ...)',
	\"block-read": '(block-read textual-input-port string) (block-read textual-input-port string count)',
	\"block-write": '(block-write textual-output-port string) (block-write textual-output-port string count)',
	\"boolean=?": '(boolean=? boolean1 boolean2)',
	\"boolean?": '(boolean? obj)',
	\"bound-identifier=?": '(bound-identifier=? identifier1 identifier2)',
	\"box": '(box obj)',
	\"box-cas!": '(box-cas! box old-obj new-obj)',
	\"box-immutable": '(box-immutable obj)',
	\"box?": '(box? obj)',
	\"break": '(break who) (break who msg irritant ...)',
	\"break)": '(break)',
	\"break-handler": 'thread param',
	\"buffer-mode": '(buffer-mode symbol)',
	\"buffer-mode?": '(buffer-mode? obj)',
	\"bwp-object?": '(bwp-object? obj)',
	\"bytes-allocated": '(bytes-allocated g)',
	\"bytes-allocated)": '(bytes-allocated)',
	\"bytes-deallocated)": '(bytes-deallocated)',
	\"bytevector": '(bytevector fill ...)',
	\"bytevector->immutable-bytevector": '(bytevector->immutable-bytevector bytevector)',
	\"bytevector->s8-list": '(bytevector->s8-list bytevector)',
	\"bytevector->sint-list": '(bytevector->sint-list bytevector eness size)',
	\"bytevector->string": '(bytevector->string bytevector transcoder)',
	\"bytevector->u8-list": '(bytevector->u8-list bytevector)',
	\"bytevector->uint-list": '(bytevector->uint-list bytevector eness size)',
	\"bytevector-compress": '(bytevector-compress bytevector)',
	\"bytevector-copy": '(bytevector-copy bytevector)',
	\"bytevector-copy!": '(bytevector-copy! src src-start dst dst-start n)',
	\"bytevector-fill!": '(bytevector-fill! bytevector fill)',
	\"bytevector-ieee-double-native-ref": '(bytevector-ieee-double-native-ref bytevector n)',
	\"bytevector-ieee-double-native-set!": '(bytevector-ieee-double-native-set! bytevector n x)',
	\"bytevector-ieee-double-ref": '(bytevector-ieee-double-ref bytevector n eness)',
	\"bytevector-ieee-double-set!": '(bytevector-ieee-double-set! bytevector n x eness)',
	\"bytevector-ieee-single-native-ref": '(bytevector-ieee-single-native-ref bytevector n)',
	\"bytevector-ieee-single-native-set!": '(bytevector-ieee-single-native-set! bytevector n x)',
	\"bytevector-ieee-single-ref": '(bytevector-ieee-single-ref bytevector n eness)',
	\"bytevector-ieee-single-set!": '(bytevector-ieee-single-set! bytevector n x eness)',
	\"bytevector-length": '(bytevector-length bytevector)',
	\"bytevector-s16-native-ref": '(bytevector-s16-native-ref bytevector n)',
	\"bytevector-s16-native-set!": '(bytevector-s16-native-set! bytevector n s16)',
	\"bytevector-s16-ref": '(bytevector-s16-ref bytevector n eness)',
	\"bytevector-s16-set!": '(bytevector-s16-set! bytevector n s16 eness)',
	\"bytevector-s24-ref": '(bytevector-s24-ref bytevector n eness)',
	\"bytevector-s24-set!": '(bytevector-s24-set! bytevector n s24 eness)',
	\"bytevector-s32-native-ref": '(bytevector-s32-native-ref bytevector n)',
	\"bytevector-s32-native-set!": '(bytevector-s32-native-set! bytevector n s32)',
	\"bytevector-s32-ref": '(bytevector-s32-ref bytevector n eness)',
	\"bytevector-s32-set!": '(bytevector-s32-set! bytevector n s32 eness)',
	\"bytevector-s40-ref": '(bytevector-s40-ref bytevector n eness)',
	\"bytevector-s40-set!": '(bytevector-s40-set! bytevector n s40 eness)',
	\"bytevector-s48-ref": '(bytevector-s48-ref bytevector n eness)',
	\"bytevector-s48-set!": '(bytevector-s48-set! bytevector n s48 eness)',
	\"bytevector-s56-ref": '(bytevector-s56-ref bytevector n eness)',
	\"bytevector-s56-set!": '(bytevector-s56-set! bytevector n s56 eness)',
	\"bytevector-s64-native-ref": '(bytevector-s64-native-ref bytevector n)',
	\"bytevector-s64-native-set!": '(bytevector-s64-native-set! bytevector n s64)',
	\"bytevector-s64-ref": '(bytevector-s64-ref bytevector n eness)',
	\"bytevector-s64-set!": '(bytevector-s64-set! bytevector n s64 eness)',
	\"bytevector-s8-ref": '(bytevector-s8-ref bytevector n)',
	\"bytevector-s8-set!": '(bytevector-s8-set! bytevector n s8)',
	\"bytevector-sint-ref": '(bytevector-sint-ref bytevector n eness size)',
	\"bytevector-sint-set!": '(bytevector-sint-set! bytevector n sint eness size)',
	\"bytevector-truncate!": '(bytevector-truncate! bytevector n)',
	\"bytevector-u16-native-ref": '(bytevector-u16-native-ref bytevector n)',
	\"bytevector-u16-native-set!": '(bytevector-u16-native-set! bytevector n u16)',
	\"bytevector-u16-ref": '(bytevector-u16-ref bytevector n eness)',
	\"bytevector-u16-set!": '(bytevector-u16-set! bytevector n u16 eness)',
	\"bytevector-u24-ref": '(bytevector-u24-ref bytevector n eness)',
	\"bytevector-u24-set!": '(bytevector-u24-set! bytevector n u24 eness)',
	\"bytevector-u32-native-ref": '(bytevector-u32-native-ref bytevector n)',
	\"bytevector-u32-native-set!": '(bytevector-u32-native-set! bytevector n u32)',
	\"bytevector-u32-ref": '(bytevector-u32-ref bytevector n eness)',
	\"bytevector-u32-set!": '(bytevector-u32-set! bytevector n u32 eness)',
	\"bytevector-u40-ref": '(bytevector-u40-ref bytevector n eness)',
	\"bytevector-u40-set!": '(bytevector-u40-set! bytevector n u40 eness)',
	\"bytevector-u48-ref": '(bytevector-u48-ref bytevector n eness)',
	\"bytevector-u48-set!": '(bytevector-u48-set! bytevector n u48 eness)',
	\"bytevector-u56-ref": '(bytevector-u56-ref bytevector n eness)',
	\"bytevector-u56-set!": '(bytevector-u56-set! bytevector n u56 eness)',
	\"bytevector-u64-native-ref": '(bytevector-u64-native-ref bytevector n)',
	\"bytevector-u64-native-set!": '(bytevector-u64-native-set! bytevector n u64)',
	\"bytevector-u64-ref": '(bytevector-u64-ref bytevector n eness)',
	\"bytevector-u64-set!": '(bytevector-u64-set! bytevector n u64 eness)',
	\"bytevector-u8-ref": '(bytevector-u8-ref bytevector n)',
	\"bytevector-u8-set!": '(bytevector-u8-set! bytevector n u8)',
	\"bytevector-uint-ref": '(bytevector-uint-ref bytevector n eness size)',
	\"bytevector-uint-set!": '(bytevector-uint-set! bytevector n uint eness size)',
	\"bytevector-uncompress": '(bytevector-uncompress bytevector)',
	\"bytevector=?": '(bytevector=? bytevector1 bytevector2)',
	\"bytevector?": '(bytevector? obj)',
	\"caaaar": '(caaaar pair)',
	\"caaadr": '(caaadr pair)',
	\"caaar": '(caaar pair)',
	\"caadar": '(caadar pair)',
	\"caaddr": '(caaddr pair)',
	\"caadr": '(caadr pair)',
	\"caar": '(caar pair)',
	\"cadaar": '(cadaar pair)',
	\"cadadr": '(cadadr pair)',
	\"cadar": '(cadar pair)',
	\"caddar": '(caddar pair)',
	\"cadddr": '(cadddr pair)',
	\"caddr": '(caddr pair)',
	\"cadr": '(cadr pair)',
	\"call-with-bytevector-output-port": '(call-with-bytevector-output-port procedure) (call-with-bytevector-output-port procedure ?transcoder)',
	\"call-with-current-continuation": '(call-with-current-continuation procedure)',
	\"call-with-input-file": '(call-with-input-file path procedure) (call-with-input-file path procedure options)',
	\"call-with-output-file": '(call-with-output-file path procedure) (call-with-output-file path procedure options)',
	\"call-with-port": '(call-with-port port procedure)',
	\"call-with-string-output-port": '(call-with-string-output-port procedure)',
	\"call-with-values": '(call-with-values producer consumer)',
	\"call/1cc": '(call/1cc procedure)',
	\"call/cc": '(call/cc procedure)',
	\"car": '(car pair)',
	\"case": '(case expr0 clause1 clause2 ...)',
	\"case-lambda": '(case-lambda clause ...)',
	\"case-sensitive": 'thread param',
	\"cd": 'global param',
	\"cdaaar": '(cdaaar pair)',
	\"cdaadr": '(cdaadr pair)',
	\"cdaar": '(cdaar pair)',
	\"cdadar": '(cdadar pair)',
	\"cdaddr": '(cdaddr pair)',
	\"cdadr": '(cdadr pair)',
	\"cdar": '(cdar pair)',
	\"cddaar": '(cddaar pair)',
	\"cddadr": '(cddadr pair)',
	\"cddar": '(cddar pair)',
	\"cdddar": '(cdddar pair)',
	\"cddddr": '(cddddr pair)',
	\"cdddr": '(cdddr pair)',
	\"cddr": '(cddr pair)',
	\"cdr": '(cdr pair)',
	\"ceiling": '(ceiling real)',
	\"cfl*": '(cfl* cflonum ...)',
	\"cfl+": '(cfl+ cflonum ...)',
	\"cfl-": '(cfl- cflonum1 cflonum2 ...)',
	\"cfl-conjugate": '(cfl-conjugate cflonum)',
	\"cfl-imag-part": '(cfl-imag-part cflonum)',
	\"cfl-magnitude-squared": '(cfl-magnitude-squared cflonum)',
	\"cfl-real-part": '(cfl-real-part cflonum)',
	\"cfl/": '(cfl/ cflonum1 cflonum2 ...)',
	\"cfl=": '(cfl= cflonum ...)',
	\"cflonum?": '(cflonum? obj)',
	\"char-": '(char- char1 char2)',
	\"char->integer": '(char->integer char)',
	\"char-alphabetic?": '(char-alphabetic? char)',
	\"char-ci<=?": '(char-ci<=? char1 char2 ...) (char-ci<=? char1 char2 char3 ...)',
	\"char-ci<?": '(char-ci<? char1 char2 ...) (char-ci<? char1 char2 char3 ...)',
	\"char-ci=?": '(char-ci=? char1 char2 ...) (char-ci=? char1 char2 char3 ...)',
	\"char-ci>=?": '(char-ci>=? char1 char2 ...) (char-ci>=? char1 char2 char3 ...)',
	\"char-ci>?": '(char-ci>? char1 char2 ...) (char-ci>? char1 char2 char3 ...)',
	\"char-downcase": '(char-downcase char)',
	\"char-foldcase": '(char-foldcase char)',
	\"char-general-category": '(char-general-category char)',
	\"char-lower-case?": '(char-lower-case? char)',
	\"char-name": '(char-name obj) (char-name name char)',
	\"char-numeric?": '(char-numeric? char)',
	\"char-ready?": '(char-ready? textual-input-port)',
	\"char-ready?)": '(char-ready?)',
	\"char-title-case?": '(char-title-case? char)',
	\"char-titlecase": '(char-titlecase char)',
	\"char-upcase": '(char-upcase char)',
	\"char-upper-case?": '(char-upper-case? char)',
	\"char-whitespace?": '(char-whitespace? char)',
	\"char<=?": '(char<=? char1 char2 ...) (char<=? char1 char2 char3 ...)',
	\"char<?": '(char<? char1 char2 ...) (char<? char1 char2 char3 ...)',
	\"char=?": '(char=? char1 char2 ...) (char=? char1 char2 char3 ...)',
	\"char>=?": '(char>=? char1 char2 ...) (char>=? char1 char2 char3 ...)',
	\"char>?": '(char>? char1 char2 ...) (char>? char1 char2 char3 ...)',
	\"char?": '(char? obj)',
	\"chmod": '(chmod path mode)',
	\"clear-input-port": '(clear-input-port input-port)',
	\"clear-input-port)": '(clear-input-port)',
	\"clear-output-port": '(clear-output-port output-port)',
	\"clear-output-port)": '(clear-output-port)',
	\"close-input-port": '(close-input-port input-port)',
	\"close-output-port": '(close-output-port output-port)',
	\"close-port": '(close-port port)',
	\"collect": '(collect g) (collect g tg)',
	\"collect)": '(collect)',
	\"collect-generation-radix": 'global param',
	\"collect-maximum-generation": 'global param',
	\"collect-notify": 'global param',
	\"collect-rendezvous)": '(collect-rendezvous)',
	\"collect-request-handler": 'global param',
	\"collect-trip-bytes": 'global param',
	\"collections)": '(collections)',
	\"command-line": 'global param',
	\"command-line)": '(command-line)',
	\"command-line-arguments": 'global param',
	\"commonization-level": 'thread param',
	\"compile": '(compile obj) (compile obj env)',
	\"compile-compressed": 'thread param',
	\"compile-file": '(compile-file input-filename) (compile-file input-filename output-filename)',
	\"compile-file-message": 'thread param',
	\"compile-imported-libraries": 'thread param',
	\"compile-interpret-simple": 'thread param',
	\"compile-library": '(compile-library input-filename) (compile-library input-filename output-filename)',
	\"compile-library-handler": 'thread param',
	\"compile-port": '(compile-port input-port output-port) (compile-port input-port output-port sfd) (compile-port input-port output-port sfd wpo-port) (compile-port input-port output-port sfd wpo-port covop)',
	\"compile-profile": 'thread param',
	\"compile-program": '(compile-program input-filename) (compile-program input-filename output-filename)',
	\"compile-program-handler": 'thread param',
	\"compile-script": '(compile-script input-filename) (compile-script input-filename output-filename)',
	\"compile-time-value-value": '(compile-time-value-value ctv)',
	\"compile-time-value?": '(compile-time-value? obj)',
	\"compile-to-file": '(compile-to-file obj-list output-file) (compile-to-file obj-list output-file sfd)',
	\"compile-to-port": '(compile-to-port obj-list output-port) (compile-to-port obj-list output-port sfd) (compile-to-port obj-list output-port sfd wpo-port) (compile-to-port obj-list output-port sfd wpo-port covop)',
	\"compile-whole-library": '(compile-whole-library input-filename output-filename)',
	\"compile-whole-program": '(compile-whole-program input-filename output-filename) (compile-whole-program input-filename output-filename libs-visible?)',
	\"complex?": '(complex? obj)',
	\"compress-format": 'thread param',
	\"compress-level": 'thread param',
	\"compute-composition": '(compute-composition object) (compute-composition object generation)',
	\"compute-size": '(compute-size object) (compute-size object generation)',
	\"cond": '(cond clause1 clause2 ...)',
	\"condition": '(condition condition ...)',
	\"condition-accessor": '(condition-accessor rtd procedure)',
	\"condition-broadcast": '(condition-broadcast cond)',
	\"condition-continuation": '(condition-continuation condition)',
	\"condition-irritants": '(condition-irritants condition)',
	\"condition-message": '(condition-message condition)',
	\"condition-name": '(condition-name condition)',
	\"condition-predicate": '(condition-predicate rtd)',
	\"condition-signal": '(condition-signal cond)',
	\"condition-wait": '(condition-wait cond mutex) (condition-wait cond mutex timeout)',
	\"condition-who": '(condition-who condition)',
	\"condition?": '(condition? obj)',
	\"conjugate": '(conjugate num)',
	\"cons": '(cons obj1 obj2)',
	\"cons*": '(cons* obj ... final-obj)',
	\"console-error-port": 'thread param',
	\"console-input-port": 'global param',
	\"console-output-port": 'global param',
	\"constant": 'syntax',
	\"constructor": 'syntax',
	\"continuation-condition?": '(continuation-condition? obj)',
	\"copy-environment": '(copy-environment env) (copy-environment env mutable?) (copy-environment env mutable? syms)',
	\"copy-time": '(copy-time time)',
	\"cos": '(cos num)',
	\"cosh": '(cosh num)',
	\"cost-center-allocation-count": '(cost-center-allocation-count cost-center)',
	\"cost-center-instruction-count": '(cost-center-instruction-count cost-center)',
	\"cost-center-time": '(cost-center-time cost-center)',
	\"cost-center?": '(cost-center? obj)',
	\"cp0-effort-limit": 'thread param',
	\"cp0-outer-unroll-limit": 'thread param',
	\"cp0-score-limit": 'thread param',
	\"cpu-time)": '(cpu-time)',
	\"create-exception-state": '(create-exception-state procedure)',
	\"create-exception-state)": '(create-exception-state)',
	\"critical-section": '(critical-section body1 body2 ...)',
	\"current-date": '(current-date offset)',
	\"current-date)": '(current-date)',
	\"current-directory": 'global param',
	\"current-error-port": 'thread param',
	\"current-error-port)": '(current-error-port)',
	\"current-eval": 'thread param',
	\"current-exception-state": 'thread param',
	\"current-expand": 'thread param',
	\"current-input-port": 'thread param',
	\"current-input-port)": '(current-input-port)',
	\"current-locate-source-object-source": 'thread param',
	\"current-make-source-object": 'thread param',
	\"current-memory-bytes)": '(current-memory-bytes)',
	\"current-output-port": 'thread param',
	\"current-output-port)": '(current-output-port)',
	\"current-time": '(current-time time-type)',
	\"current-time)": '(current-time)',
	\"current-transcoder": 'thread param',
	\"custom-port-buffer-size": 'thread param',
	\"date->time-utc": '(date->time-utc date)',
	\"date-and-time": '(date-and-time date)',
	\"date-and-time)": '(date-and-time)',
	\"date-day": '(date-day date)',
	\"date-dst?": '(date-dst? date)',
	\"date-hour": '(date-hour date)',
	\"date-minute": '(date-minute date)',
	\"date-month": '(date-month date)',
	\"date-nanosecond": '(date-nanosecond date)',
	\"date-second": '(date-second date)',
	\"date-week-day": '(date-week-day date)',
	\"date-year": '(date-year date)',
	\"date-year-day": '(date-year-day date)',
	\"date-zone-name": '(date-zone-name date)',
	\"date-zone-offset": '(date-zone-offset date)',
	\"date?": '(date? obj)',
	\"datum": '(datum template)',
	\"datum->syntax": '(datum->syntax template-identifier obj)',
	\"datum->syntax-object": '(datum->syntax-object template-identifier obj)',
	\"debug)": '(debug)',
	\"debug-condition": 'thread param',
	\"debug-level": 'thread param',
	\"debug-on-exception": 'global param',
	\"decode-float": '(decode-float x)',
	\"default-exception-handler": '(default-exception-handler obj)',
	\"default-library-search-handler": '(default-library-search-handler who library directories extensions)',
	\"default-prompt-and-read": '(default-prompt-and-read level)',
	\"default-record-equal-procedure": 'thread param',
	\"default-record-hash-procedure": 'thread param',
	\"define": '(define var) (define var expr) (define (var0 . varr) body1 body2 ...) (define (var0 var1 ...) body1 body2 ...) (define (var0 var1 var2 ... . varr) body1 body2 ...)',
	\"define-condition-type": '(define-condition-type name parent constructor pred field ...)',
	\"define-enumeration": '(define-enumeration name (symbol ...) constructor)',
	\"define-ftype": '(define-ftype ftype-name ftype) (define-ftype (ftype-name ftype) ...)',
	\"define-property": '(define-property id key expr)',
	\"define-record": '(define-record name (fld1 ...) ((fld2 init) ...) (opt ...)) (define-record name parent (fld1 ...) ((fld2 init) ...) (opt ...))',
	\"define-record-type": '(define-record-type record-name clause ...) (define-record-type (record-name constructor pred) clause ...)',
	\"define-structure": '(define-structure (name id1 ...) ((id2 expr) ...))',
	\"define-syntax": '(define-syntax keyword expr)',
	\"define-top-level-syntax": '(define-top-level-syntax symbol obj) (define-top-level-syntax symbol obj env)',
	\"define-top-level-value": '(define-top-level-value symbol obj) (define-top-level-value symbol obj env)',
	\"define-values": '(define-values formals expr)',
	\"delay": '(delay expr)',
	\"delete-directory": '(delete-directory path) (delete-directory path error?)',
	\"delete-file": '(delete-file path) (delete-file path error?)',
	\"denominator": '(denominator rat)',
	\"directory-list": '(directory-list path)',
	\"directory-separator)": '(directory-separator)',
	\"directory-separator?": '(directory-separator? char)',
	\"disable-interrupts)": '(disable-interrupts)',
	\"display": '(display obj) (display obj textual-output-port)',
	\"display-condition": '(display-condition obj) (display-condition obj textual-output-port)',
	\"display-statistics": '(display-statistics textual-output-port)',
	\"display-statistics)": '(display-statistics)',
	\"display-string": '(display-string string) (display-string string textual-output-port)',
	\"div": '(div x1 x2)',
	\"div-and-mod": '(div-and-mod x1 x2)',
	\"div0": '(div0 x1 x2)',
	\"div0-and-mod0": '(div0-and-mod0 x1 x2)',
	\"do": '(do ((var init update) ...) (test result ...) expr ...)',
	\"drop-prefix": 'syntax',
	\"dynamic-wind": '(dynamic-wind in body out) (dynamic-wind critical? in body out)',
	\"ee-auto-indent": 'global param',
	\"ee-auto-paren-balance": 'global param',
	\"ee-bind-key": '(ee-bind-key key procedure)',
	\"ee-common-identifiers": 'global param',
	\"ee-compose": '(ee-compose ecmd ...)',
	\"ee-default-repeat": 'global param',
	\"ee-flash-parens": 'global param',
	\"ee-history-limit": 'global param',
	\"ee-noisy": 'global param',
	\"ee-paren-flash-delay": 'global param',
	\"ee-standard-indent": 'global param',
	\"ee-string-macro": '(ee-string-macro string)',
	\"else": 'syntax',
	\"enable-cross-library-optimization": 'thread param',
	\"enable-interrupts)": '(enable-interrupts)',
	\"enable-object-counts": 'global param',
	\"endianness": '(endianness symbol)',
	\"engine-block)": '(engine-block)',
	\"engine-return": '(engine-return obj ...)',
	\"enum-set->list": '(enum-set->list enum-set)',
	\"enum-set-complement": '(enum-set-complement enum-set)',
	\"enum-set-constructor": '(enum-set-constructor enum-set)',
	\"enum-set-difference": '(enum-set-difference enum-set1 enum-set2)',
	\"enum-set-indexer": '(enum-set-indexer enum-set)',
	\"enum-set-intersection": '(enum-set-intersection enum-set1 enum-set2)',
	\"enum-set-member?": '(enum-set-member? symbol enum-set)',
	\"enum-set-projection": '(enum-set-projection enum-set1 enum-set2)',
	\"enum-set-subset?": '(enum-set-subset? enum-set1 enum-set2)',
	\"enum-set-union": '(enum-set-union enum-set1 enum-set2)',
	\"enum-set-universe": '(enum-set-universe enum-set)',
	\"enum-set=?": '(enum-set=? enum-set1 enum-set2)',
	\"enum-set?": '(enum-set? obj)',
	\"enumerate": '(enumerate ls)',
	\"environment": '(environment import-spec ...)',
	\"environment-mutable?": '(environment-mutable? env)',
	\"environment-symbols": '(environment-symbols env)',
	\"environment?": '(environment? obj)',
	\"eof-object)": '(eof-object)',
	\"eof-object?": '(eof-object? obj)',
	\"eol-style": '(eol-style symbol)',
	\"ephemeron-cons": '(ephemeron-cons obj1 obj2)',
	\"ephemeron-pair?": '(ephemeron-pair? obj)',
	\"eq-hashtable-cell": '(eq-hashtable-cell hashtable key default)',
	\"eq-hashtable-contains?": '(eq-hashtable-contains? hashtable key)',
	\"eq-hashtable-delete!": '(eq-hashtable-delete! hashtable key)',
	\"eq-hashtable-ephemeron?": '(eq-hashtable-ephemeron? hashtable)',
	\"eq-hashtable-ref": '(eq-hashtable-ref hashtable key default)',
	\"eq-hashtable-set!": '(eq-hashtable-set! hashtable key value)',
	\"eq-hashtable-update!": '(eq-hashtable-update! hashtable key procedure default)',
	\"eq-hashtable-weak?": '(eq-hashtable-weak? hashtable)',
	\"eq-hashtable?": '(eq-hashtable? obj)',
	\"eq?": '(eq? obj1 obj2)',
	\"equal-hash": '(equal-hash obj)',
	\"equal?": '(equal? obj1 obj2)',
	\"eqv?": '(eqv? obj1 obj2)',
	\"error": '(error who msg irritant ...)',
	\"error-handling-mode": '(error-handling-mode symbol)',
	\"error?": '(error? obj)',
	\"errorf": '(errorf who msg irritant ...)',
	\"eval": '(eval obj) (eval obj env) (eval obj environment)',
	\"eval-syntax-expanders-when": 'thread param',
	\"eval-when": '(eval-when situations form1 form2 ...)',
	\"even?": '(even? int)',
	\"exact": '(exact num)',
	\"exact->inexact": '(exact->inexact num)',
	\"exact-integer-sqrt": '(exact-integer-sqrt n)',
	\"exact?": '(exact? num)',
	\"except": 'syntax',
	\"exclusive-cond": '(exclusive-cond clause1 clause2 ...)',
	\"exists": '(exists procedure list1 list2 ...)',
	\"exit": '(exit obj) (exit obj ...)',
	\"exit)": '(exit)',
	\"exit-handler": 'thread param',
	\"exp": '(exp num)',
	\"expand": '(expand obj) (expand obj env)',
	\"expand-output": 'thread param',
	\"expand/optimize": '(expand/optimize obj) (expand/optimize obj env)',
	\"expand/optimize-output": 'thread param',
	\"export": '(export export-spec ...)',
	\"expr0": '(expr0 expr1 ...)',
	\"expression-editor": 'module',
	\"expt": '(expt num1 num2)',
	\"expt-mod": '(expt-mod int1 int2 int3)',
	\"extend-syntax": '(extend-syntax (name key ...) (pat fender template) ...)',
	\"fasl-file": '(fasl-file ifn ofn)',
	\"fasl-read": '(fasl-read binary-input-port) (fasl-read binary-input-port situation)',
	\"fasl-strip-options": '(fasl-strip-options symbol ...)',
	\"fasl-write": '(fasl-write obj binary-output-port)',
	\"fields": 'syntax',
	\"file-access-time": '(file-access-time path/port) (file-access-time path/port follow?)',
	\"file-buffer-size": 'thread param',
	\"file-change-time": '(file-change-time path/port) (file-change-time path/port follow?)',
	\"file-directory?": '(file-directory? path) (file-directory? path follow?)',
	\"file-exists?": '(file-exists? path) (file-exists? path follow?)',
	\"file-length": '(file-length port)',
	\"file-modification-time": '(file-modification-time path/port) (file-modification-time path/port follow?)',
	\"file-options": '(file-options symbol ...)',
	\"file-port?": '(file-port? port)',
	\"file-position": '(file-position port) (file-position port pos)',
	\"file-regular?": '(file-regular? path) (file-regular? path follow?)',
	\"file-symbolic-link?": '(file-symbolic-link? path)',
	\"filter": '(filter procedure list)',
	\"find": '(find procedure list)',
	\"finite?": '(finite? real)',
	\"fixnum->flonum": '(fixnum->flonum fx)',
	\"fixnum-width)": '(fixnum-width)',
	\"fixnum?": '(fixnum? obj)',
	\"fl*": '(fl* fl ...)',
	\"fl+": '(fl+ fl ...)',
	\"fl-": '(fl- fl) (fl- fl1 fl2 fl3 ...)',
	\"fl-make-rectangular": '(fl-make-rectangular flonum1 flonum2)',
	\"fl/": '(fl/ fl) (fl/ fl1 fl2 fl3 ...)',
	\"fl<": '(fl< flonum1 flonum2 ...)',
	\"fl<=": '(fl<= flonum1 flonum2 ...)',
	\"fl<=?": '(fl<=? fl1 fl2 fl3 ...)',
	\"fl<?": '(fl<? fl1 fl2 fl3 ...)',
	\"fl=": '(fl= flonum1 flonum2 ...)',
	\"fl=?": '(fl=? fl1 fl2 fl3 ...)',
	\"fl>": '(fl> flonum1 flonum2 ...)',
	\"fl>=": '(fl>= flonum1 flonum2 ...)',
	\"fl>=?": '(fl>=? fl1 fl2 fl3 ...)',
	\"fl>?": '(fl>? fl1 fl2 fl3 ...)',
	\"flabs": '(flabs fl)',
	\"flacos": '(flacos fl)',
	\"flasin": '(flasin fl)',
	\"flatan": '(flatan fl) (flatan fl1 fl2)',
	\"flceiling": '(flceiling fl)',
	\"flcos": '(flcos fl)',
	\"fldenominator": '(fldenominator fl)',
	\"fldiv": '(fldiv fl1 fl2)',
	\"fldiv-and-mod": '(fldiv-and-mod fl1 fl2)',
	\"fldiv0": '(fldiv0 fl1 fl2)',
	\"fldiv0-and-mod0": '(fldiv0-and-mod0 fl1 fl2)',
	\"fleven?": '(fleven? fl-int)',
	\"flexp": '(flexp fl)',
	\"flexpt": '(flexpt fl1 fl2)',
	\"flfinite?": '(flfinite? fl)',
	\"flfloor": '(flfloor fl)',
	\"flinfinite?": '(flinfinite? fl)',
	\"flinteger?": '(flinteger? fl)',
	\"fllog": '(fllog fl) (fllog fl1 fl2)',
	\"fllp": '(fllp flonum)',
	\"flmax": '(flmax fl1 fl2 ...)',
	\"flmin": '(flmin fl1 fl2 ...)',
	\"flmod": '(flmod fl1 fl2)',
	\"flmod0": '(flmod0 fl1 fl2)',
	\"flnan?": '(flnan? fl)',
	\"flnegative?": '(flnegative? fl)',
	\"flnonnegative?": '(flnonnegative? fl)',
	\"flnonpositive?": '(flnonpositive? fl)',
	\"flnumerator": '(flnumerator fl)',
	\"flodd?": '(flodd? fl-int)',
	\"flonum->fixnum": '(flonum->fixnum flonum)',
	\"flonum?": '(flonum? obj)',
	\"floor": '(floor real)',
	\"flpositive?": '(flpositive? fl)',
	\"flround": '(flround fl)',
	\"flsin": '(flsin fl)',
	\"flsqrt": '(flsqrt fl)',
	\"fltan": '(fltan fl)',
	\"fltruncate": '(fltruncate fl)',
	\"fluid-let": '(fluid-let ((var expr) ...) body1 body2 ...)',
	\"fluid-let-syntax": '(fluid-let-syntax ((keyword expr) ...) form1 form2 ...)',
	\"flush-output-port": '(flush-output-port output-port)',
	\"flush-output-port)": '(flush-output-port)',
	\"flzero?": '(flzero? fl)',
	\"fold-left": '(fold-left procedure obj list1 list2 ...)',
	\"fold-right": '(fold-right procedure obj list1 list2 ...)',
	\"for-all": '(for-all procedure list1 list2 ...)',
	\"for-each": '(for-each procedure list1 list2 ...)',
	\"force": '(force promise)',
	\"foreign-address-name": '(foreign-address-name address)',
	\"foreign-alloc": '(foreign-alloc n)',
	\"foreign-callable": '(foreign-callable conv ... proc-exp (param-type ...) res-type)',
	\"foreign-callable-code-object": '(foreign-callable-code-object address)',
	\"foreign-callable-entry-point": '(foreign-callable-entry-point code)',
	\"foreign-entry": '(foreign-entry entry-name)',
	\"foreign-entry?": '(foreign-entry? entry-name)',
	\"foreign-free": '(foreign-free address)',
	\"foreign-procedure": '(foreign-procedure conv ... entry-exp (param-type ...) res-type)',
	\"foreign-ref": '(foreign-ref type address offset)',
	\"foreign-set!": '(foreign-set! type address offset value)',
	\"foreign-sizeof": '(foreign-sizeof type)',
	\"fork-thread": '(fork-thread thunk)',
	\"format": '(format format-string obj ...) (format #f format-string obj ...) (format #t format-string obj ...) (format textual-output-port format-string obj ...)',
	\"format-condition?": '(format-condition? obj)',
	\"fprintf": '(fprintf textual-output-port format-string obj ...)',
	\"free-identifier=?": '(free-identifier=? identifier1 identifier2)',
	\"fresh-line": '(fresh-line textual-output-port)',
	\"fresh-line)": '(fresh-line)',
	\"ftype-&ref": '(ftype-&ref ftype-name (a ...) fptr-expr) (ftype-&ref ftype-name (a ...) fptr-expr index)',
	\"ftype-guardian": '(ftype-guardian ftype-name)',
	\"ftype-init-lock!": '(ftype-init-lock! ftype-name (a ...) fptr-expr) (ftype-init-lock! ftype-name (a ...) fptr-expr index)',
	\"ftype-lock!": '(ftype-lock! ftype-name (a ...) fptr-expr) (ftype-lock! ftype-name (a ...) fptr-expr index)',
	\"ftype-locked-decr!": '(ftype-locked-decr! ftype-name (a ...) fptr-expr) (ftype-locked-decr! ftype-name (a ...) fptr-expr index)',
	\"ftype-locked-incr!": '(ftype-locked-incr! ftype-name (a ...) fptr-expr) (ftype-locked-incr! ftype-name (a ...) fptr-expr index)',
	\"ftype-pointer->sexpr": '(ftype-pointer->sexpr fptr)',
	\"ftype-pointer-address": '(ftype-pointer-address fptr)',
	\"ftype-pointer-ftype": '(ftype-pointer-ftype fptr)',
	\"ftype-pointer-null?": '(ftype-pointer-null? fptr)',
	\"ftype-pointer=?": '(ftype-pointer=? fptr1 fptr2)',
	\"ftype-pointer?": '(ftype-pointer? obj) (ftype-pointer? ftype-name obj)',
	\"ftype-ref": '(ftype-ref ftype-name (a ...) fptr-expr) (ftype-ref ftype-name (a ...) fptr-expr index)',
	\"ftype-set!": '(ftype-set! ftype-name (a ...) fptr-expr val-expr) (ftype-set! ftype-name (a ...) fptr-expr index val-expr)',
	\"ftype-sizeof": '(ftype-sizeof ftype-name)',
	\"ftype-spin-lock!": '(ftype-spin-lock! ftype-name (a ...) fptr-expr) (ftype-spin-lock! ftype-name (a ...) fptr-expr index)',
	\"ftype-unlock!": '(ftype-unlock! ftype-name (a ...) fptr-expr) (ftype-unlock! ftype-name (a ...) fptr-expr index)',
	\"fx*": '(fx* fx1 fx2) (fx* fixnum ...)',
	\"fx*/carry": '(fx*/carry fx1 fx2 fx3)',
	\"fx+": '(fx+ fx1 fx2) (fx+ fixnum ...)',
	\"fx+/carry": '(fx+/carry fx1 fx2 fx3)',
	\"fx-": '(fx- fx) (fx- fx1 fx2) (fx- fixnum1 fixnum2 ...)',
	\"fx-/carry": '(fx-/carry fx1 fx2 fx3)',
	\"fx/": '(fx/ fixnum1 fixnum2 ...)',
	\"fx1+": '(fx1+ fixnum)',
	\"fx1-": '(fx1- fixnum)',
	\"fx<": '(fx< fixnum1 fixnum2 ...)',
	\"fx<=": '(fx<= fixnum1 fixnum2 ...)',
	\"fx<=?": '(fx<=? fx1 fx2 fx3 ...)',
	\"fx<?": '(fx<? fx1 fx2 fx3 ...)',
	\"fx=": '(fx= fixnum1 fixnum2 ...)',
	\"fx=?": '(fx=? fx1 fx2 fx3 ...)',
	\"fx>": '(fx> fixnum1 fixnum2 ...)',
	\"fx>=": '(fx>= fixnum1 fixnum2 ...)',
	\"fx>=?": '(fx>=? fx1 fx2 fx3 ...)',
	\"fx>?": '(fx>? fx1 fx2 fx3 ...)',
	\"fxabs": '(fxabs fixnum)',
	\"fxand": '(fxand fx ...)',
	\"fxarithmetic-shift": '(fxarithmetic-shift fx1 fx2)',
	\"fxarithmetic-shift-left": '(fxarithmetic-shift-left fx1 fx2)',
	\"fxarithmetic-shift-right": '(fxarithmetic-shift-right fx1 fx2)',
	\"fxbit-count": '(fxbit-count fx)',
	\"fxbit-field": '(fxbit-field fx1 fx2 fx3)',
	\"fxbit-set?": '(fxbit-set? fx1 fx2)',
	\"fxcopy-bit": '(fxcopy-bit fx1 fx2 fx3)',
	\"fxcopy-bit-field": '(fxcopy-bit-field fx1 fx2 fx3 fx4)',
	\"fxdiv": '(fxdiv fx1 fx2)',
	\"fxdiv-and-mod": '(fxdiv-and-mod fx1 fx2)',
	\"fxdiv0": '(fxdiv0 fx1 fx2)',
	\"fxdiv0-and-mod0": '(fxdiv0-and-mod0 fx1 fx2)',
	\"fxeven?": '(fxeven? fx)',
	\"fxfirst-bit-set": '(fxfirst-bit-set fx)',
	\"fxif": '(fxif fx1 fx2 fx3)',
	\"fxior": '(fxior fx ...)',
	\"fxlength": '(fxlength fx)',
	\"fxlogand": '(fxlogand fixnum ...)',
	\"fxlogbit0": '(fxlogbit0 index fixnum)',
	\"fxlogbit1": '(fxlogbit1 index fixnum)',
	\"fxlogbit?": '(fxlogbit? index fixnum)',
	\"fxlogior": '(fxlogior fixnum ...)',
	\"fxlognot": '(fxlognot fixnum)',
	\"fxlogor": '(fxlogor fixnum ...)',
	\"fxlogtest": '(fxlogtest fixnum1 fixnum2)',
	\"fxlogxor": '(fxlogxor fixnum ...)',
	\"fxmax": '(fxmax fx1 fx2 ...)',
	\"fxmin": '(fxmin fx1 fx2 ...)',
	\"fxmod": '(fxmod fx1 fx2)',
	\"fxmod0": '(fxmod0 fx1 fx2)',
	\"fxmodulo": '(fxmodulo fixnum1 fixnum2)',
	\"fxnegative?": '(fxnegative? fx)',
	\"fxnonnegative?": '(fxnonnegative? fixnum)',
	\"fxnonpositive?": '(fxnonpositive? fixnum)',
	\"fxnot": '(fxnot fx)',
	\"fxodd?": '(fxodd? fx)',
	\"fxpositive?": '(fxpositive? fx)',
	\"fxquotient": '(fxquotient fixnum1 fixnum2 ...)',
	\"fxremainder": '(fxremainder fixnum1 fixnum2)',
	\"fxreverse-bit-field": '(fxreverse-bit-field fx1 fx2 fx3)',
	\"fxrotate-bit-field": '(fxrotate-bit-field fx1 fx2 fx3 fx4)',
	\"fxsll": '(fxsll fixnum count)',
	\"fxsra": '(fxsra fixnum count)',
	\"fxsrl": '(fxsrl fixnum count)',
	\"fxvector": '(fxvector fixnum ...)',
	\"fxvector->immutable-fxvector": '(fxvector->immutable-fxvector fxvector)',
	\"fxvector->list": '(fxvector->list fxvector)',
	\"fxvector-copy": '(fxvector-copy fxvector)',
	\"fxvector-fill!": '(fxvector-fill! fxvector fixnum)',
	\"fxvector-length": '(fxvector-length fxvector)',
	\"fxvector-ref": '(fxvector-ref fxvector n)',
	\"fxvector-set!": '(fxvector-set! fxvector n fixnum)',
	\"fxvector?": '(fxvector? obj)',
	\"fxxor": '(fxxor fx ...)',
	\"fxzero?": '(fxzero? fx)',
	\"gcd": '(gcd int ...)',
	\"generate-allocation-counts": 'thread param',
	\"generate-covin-files": 'thread param',
	\"generate-inspector-information": 'thread param',
	\"generate-instruction-counts": 'thread param',
	\"generate-interrupt-trap": 'thread param',
	\"generate-procedure-source-information": 'thread param',
	\"generate-profile-forms)": '(generate-profile-forms)',
	\"generate-temporaries": '(generate-temporaries list)',
	\"generate-wpo-files": 'thread param',
	\"gensym": '(gensym pretty-name) (gensym pretty-name unique-name)',
	\"gensym)": '(gensym)',
	\"gensym->unique-string": '(gensym->unique-string gensym)',
	\"gensym-count": 'thread param',
	\"gensym-prefix": 'thread param',
	\"gensym?": '(gensym? obj)',
	\"get-bytevector-all": '(get-bytevector-all binary-input-port)',
	\"get-bytevector-n": '(get-bytevector-n binary-input-port n)',
	\"get-bytevector-n!": '(get-bytevector-n! binary-input-port bytevector start n)',
	\"get-bytevector-some": '(get-bytevector-some binary-input-port)',
	\"get-bytevector-some!": '(get-bytevector-some! binary-input-port bytevector start n)',
	\"get-char": '(get-char textual-input-port)',
	\"get-datum": '(get-datum textual-input-port)',
	\"get-datum/annotations": '(get-datum/annotations textual-input-port sfd bfp)',
	\"get-hash-table": '(get-hash-table ht k d)',
	\"get-line": '(get-line textual-input-port)',
	\"get-mode": '(get-mode path) (get-mode path follow?)',
	\"get-output-string": '(get-output-string string-output-port)',
	\"get-process-id)": '(get-process-id)',
	\"get-registry": '(get-registry key)',
	\"get-source-table!": '(get-source-table! textual-input-port source-table) (get-source-table! textual-input-port source-table combine)',
	\"get-string-all": '(get-string-all textual-input-port)',
	\"get-string-n": '(get-string-n textual-input-port n)',
	\"get-string-n!": '(get-string-n! textual-input-port string start n)',
	\"get-string-some": '(get-string-some textual-input-port)',
	\"get-string-some!": '(get-string-some! textual-input-port string start n)',
	\"get-thread-id)": '(get-thread-id)',
	\"get-u8": '(get-u8 binary-input-port)',
	\"getenv": '(getenv key)',
	\"getprop": '(getprop symbol key) (getprop symbol key default)',
	\"greatest-fixnum)": '(greatest-fixnum)',
	\"guard": '(guard (var clause1 clause2 ...) b1 b2 ...)',
	\"guardian?": '(guardian? obj)',
	\"hash-table-for-each": '(hash-table-for-each ht p)',
	\"hash-table-map": '(hash-table-map ht p)',
	\"hash-table?": '(hash-table? obj)',
	\"hashtable-cell": '(hashtable-cell hashtable key default)',
	\"hashtable-cells": '(hashtable-cells hashtable) (hashtable-cells hashtable size)',
	\"hashtable-clear!": '(hashtable-clear! hashtable) (hashtable-clear! hashtable size)',
	\"hashtable-contains?": '(hashtable-contains? hashtable key)',
	\"hashtable-copy": '(hashtable-copy hashtable) (hashtable-copy hashtable mutable?)',
	\"hashtable-delete!": '(hashtable-delete! hashtable key)',
	\"hashtable-entries": '(hashtable-entries hashtable) (hashtable-entries hashtable size)',
	\"hashtable-ephemeron?": '(hashtable-ephemeron? obj)',
	\"hashtable-equivalence-function": '(hashtable-equivalence-function hashtable)',
	\"hashtable-hash-function": '(hashtable-hash-function hashtable)',
	\"hashtable-keys": '(hashtable-keys hashtable) (hashtable-keys hashtable size)',
	\"hashtable-mutable?": '(hashtable-mutable? hashtable)',
	\"hashtable-ref": '(hashtable-ref hashtable key default)',
	\"hashtable-set!": '(hashtable-set! hashtable key obj)',
	\"hashtable-size": '(hashtable-size hashtable)',
	\"hashtable-update!": '(hashtable-update! hashtable key procedure default)',
	\"hashtable-values": '(hashtable-values hashtable) (hashtable-values hashtable size)',
	\"hashtable-weak?": '(hashtable-weak? obj)',
	\"hashtable?": '(hashtable? obj)',
	\"heap-reserve-ratio": 'global param',
	\"i/o-decoding-error?": '(i/o-decoding-error? obj)',
	\"i/o-encoding-error-char": '(i/o-encoding-error-char condition)',
	\"i/o-encoding-error?": '(i/o-encoding-error? obj)',
	\"i/o-error-filename": '(i/o-error-filename condition)',
	\"i/o-error-port": '(i/o-error-port condition)',
	\"i/o-error-position": '(i/o-error-position condition)',
	\"i/o-error?": '(i/o-error? obj)',
	\"i/o-file-already-exists-error?": '(i/o-file-already-exists-error? obj)',
	\"i/o-file-does-not-exist-error?": '(i/o-file-does-not-exist-error? obj)',
	\"i/o-file-is-read-only-error?": '(i/o-file-is-read-only-error? obj)',
	\"i/o-file-protection-error?": '(i/o-file-protection-error? obj)',
	\"i/o-filename-error?": '(i/o-filename-error? obj)',
	\"i/o-invalid-position-error?": '(i/o-invalid-position-error? obj)',
	\"i/o-port-error?": '(i/o-port-error? obj)',
	\"i/o-read-error?": '(i/o-read-error? obj)',
	\"i/o-write-error?": '(i/o-write-error? obj)',
	\"iconv-codec": '(iconv-codec code-page)',
	\"identifier-syntax": '(identifier-syntax tmpl) (identifier-syntax (id1 tmpl1) ((set! id2 e2) tmpl2))',
	\"identifier?": '(identifier? obj)',
	\"ieee": 'module',
	\"ieee-environment)": '(ieee-environment)',
	\"if": '(if test consequent) (if test consequent alternative)',
	\"imag-part": '(imag-part num)',
	\"immutable": 'syntax',
	\"immutable-box?": '(immutable-box? obj)',
	\"immutable-bytevector?": '(immutable-bytevector? obj)',
	\"immutable-fxvector?": '(immutable-fxvector? obj)',
	\"immutable-string?": '(immutable-string? obj)',
	\"immutable-vector?": '(immutable-vector? obj)',
	\"implementation-restriction-violation?": '(implementation-restriction-violation? obj)',
	\"implicit-exports": '(implicit-exports #t) (implicit-exports #f)',
	\"import": '(import import-spec ...)',
	\"import-notify": 'thread param',
	\"import-only": '(import-only import-spec ...)',
	\"include": '(include path)',
	\"indirect-export": '(indirect-export id indirect-id ...)',
	\"inexact": '(inexact num)',
	\"inexact->exact": '(inexact->exact num)',
	\"inexact?": '(inexact? num)',
	\"infinite?": '(infinite? real)',
	\"initial-bytes-allocated)": '(initial-bytes-allocated)',
	\"input-port-ready?": '(input-port-ready? input-port)',
	\"input-port?": '(input-port? obj)',
	\"inspect": '(inspect obj)',
	\"inspect/object": '(inspect/object object)',
	\"integer->char": '(integer->char n)',
	\"integer-length": '(integer-length n)',
	\"integer-valued?": '(integer-valued? obj)',
	\"integer?": '(integer? obj)',
	\"interaction-environment": 'thread param',
	\"interactive?)": '(interactive?)',
	\"internal-defines-as-letrec*": 'thread param',
	\"interpret": '(interpret obj) (interpret obj env)',
	\"iota": '(iota n)',
	\"irritants-condition?": '(irritants-condition? obj)',
	\"isqrt": '(isqrt n)',
	\"keyboard-interrupt-handler": 'thread param',
	\"lambda": '(lambda formals body1 body2 ...)',
	\"last-pair": '(last-pair list)',
	\"latin-1-codec)": '(latin-1-codec)',
	\"lcm": '(lcm int ...)',
	\"least-fixnum)": '(least-fixnum)',
	\"length": '(length list)',
	\"let": '(let ((var expr) ...) body1 body2 ...) (let name ((var expr) ...) body1 body2 ...)',
	\"let*": '(let* ((var expr) ...) body1 body2 ...)',
	\"let*-values": '(let*-values ((formals expr) ...) body1 body2 ...)',
	\"let-syntax": '(let-syntax ((keyword expr) ...) form1 form2 ...)',
	\"let-values": '(let-values ((formals expr) ...) body1 body2 ...)',
	\"letrec": '(letrec ((var expr) ...) body1 body2 ...)',
	\"letrec*": '(letrec* ((var expr) ...) body1 body2 ...)',
	\"letrec-syntax": '(letrec-syntax ((keyword expr) ...) form1 form2 ...)',
	\"lexical-violation?": '(lexical-violation? obj)',
	\"library": '(library name exports imports library-body)',
	\"library-directories": 'thread param',
	\"library-exports": '(library-exports libref)',
	\"library-extensions": 'thread param',
	\"library-list)": '(library-list)',
	\"library-object-filename": '(library-object-filename libref)',
	\"library-requirements": '(library-requirements libref) (library-requirements libref options)',
	\"library-requirements-options": '(library-requirements-options symbol ...)',
	\"library-search-handler": 'thread param',
	\"library-version": '(library-version libref)',
	\"list": '(list obj ...)',
	\"list*": '(list* obj ... final-obj)',
	\"list->fxvector": '(list->fxvector list)',
	\"list->string": '(list->string list)',
	\"list->vector": '(list->vector list)',
	\"list-copy": '(list-copy list)',
	\"list-head": '(list-head list n)',
	\"list-ref": '(list-ref list n)',
	\"list-sort": '(list-sort predicate list)',
	\"list-tail": '(list-tail list n)',
	\"list?": '(list? obj)',
	\"literal-identifier=?": '(literal-identifier=? identifier1 identifier2)',
	\"load": '(load path) (load path eval-proc)',
	\"load-compiled-from-port": '(load-compiled-from-port input-port)',
	\"load-library": '(load-library path) (load-library path eval-proc)',
	\"load-program": '(load-program path) (load-program path eval-proc)',
	\"load-shared-object": '(load-shared-object path)',
	\"locate-source": '(locate-source sfd pos) (locate-source sfd pos use-cache?)',
	\"locate-source-object-source": '(locate-source-object-source source-object get-start? use-cache?)',
	\"lock-object": '(lock-object obj)',
	\"locked-object?": '(locked-object? obj)',
	\"log": '(log num) (log num1 num2)',
	\"logand": '(logand int ...)',
	\"logbit0": '(logbit0 index int)',
	\"logbit1": '(logbit1 index int)',
	\"logbit?": '(logbit? index int)',
	\"logior": '(logior int ...)',
	\"lognot": '(lognot int)',
	\"logor": '(logor int ...)',
	\"logtest": '(logtest int1 int2)',
	\"logxor": '(logxor int ...)',
	\"lookahead-char": '(lookahead-char textual-input-port)',
	\"lookahead-u8": '(lookahead-u8 binary-input-port)',
	\"machine-type)": '(machine-type)',
	\"magnitude": '(magnitude num)',
	\"magnitude-squared": '(magnitude-squared num)',
	\"make-annotation": '(make-annotation obj source-object stripped-obj) (make-annotation obj source-object stripped-obj options)',
	\"make-assertion-violation)": '(make-assertion-violation)',
	\"make-boot-file": '(make-boot-file output-filename base-boot-list input-filename ...)',
	\"make-boot-header": '(make-boot-header output-filename base-boot1 base-boot2...)',
	\"make-bytevector": '(make-bytevector n) (make-bytevector n fill)',
	\"make-compile-time-value": '(make-compile-time-value obj)',
	\"make-condition": '(make-condition name)',
	\"make-condition)": '(make-condition)',
	\"make-continuation-condition": '(make-continuation-condition continuation)',
	\"make-cost-center)": '(make-cost-center)',
	\"make-custom-binary-input-port": '(make-custom-binary-input-port id r! gp sp! close)',
	\"make-custom-binary-input/output-port": '(make-custom-binary-input/output-port id r! w! gp sp! close)',
	\"make-custom-binary-output-port": '(make-custom-binary-output-port id w! gp sp! close)',
	\"make-custom-textual-input-port": '(make-custom-textual-input-port id r! gp sp! close)',
	\"make-custom-textual-input/output-port": '(make-custom-textual-input/output-port id r! w! gp sp! close)',
	\"make-custom-textual-output-port": '(make-custom-textual-output-port id w! gp sp! close)',
	\"make-date": '(make-date nsec sec min hour day mon year) (make-date nsec sec min hour day mon year offset)',
	\"make-engine": '(make-engine thunk)',
	\"make-enumeration": '(make-enumeration symbol-list)',
	\"make-ephemeron-eq-hashtable": '(make-ephemeron-eq-hashtable size)',
	\"make-ephemeron-eq-hashtable)": '(make-ephemeron-eq-hashtable)',
	\"make-ephemeron-eqv-hashtable": '(make-ephemeron-eqv-hashtable size)',
	\"make-ephemeron-eqv-hashtable)": '(make-ephemeron-eqv-hashtable)',
	\"make-eq-hashtable": '(make-eq-hashtable size)',
	\"make-eq-hashtable)": '(make-eq-hashtable)',
	\"make-eqv-hashtable": '(make-eqv-hashtable size)',
	\"make-eqv-hashtable)": '(make-eqv-hashtable)',
	\"make-error)": '(make-error)',
	\"make-format-condition)": '(make-format-condition)',
	\"make-ftype-pointer": '(make-ftype-pointer ftype-name expr)',
	\"make-fxvector": '(make-fxvector n) (make-fxvector n fixnum)',
	\"make-guardian)": '(make-guardian)',
	\"make-hash-table": '(make-hash-table weak?)',
	\"make-hash-table)": '(make-hash-table)',
	\"make-hashtable": '(make-hashtable hash equiv?) (make-hashtable hash equiv? size)',
	\"make-i/o-decoding-error": '(make-i/o-decoding-error pobj)',
	\"make-i/o-encoding-error": '(make-i/o-encoding-error pobj cobj)',
	\"make-i/o-error)": '(make-i/o-error)',
	\"make-i/o-file-already-exists-error": '(make-i/o-file-already-exists-error filename)',
	\"make-i/o-file-does-not-exist-error": '(make-i/o-file-does-not-exist-error filename)',
	\"make-i/o-file-is-read-only-error": '(make-i/o-file-is-read-only-error filename)',
	\"make-i/o-file-protection-error": '(make-i/o-file-protection-error filename)',
	\"make-i/o-filename-error": '(make-i/o-filename-error filename)',
	\"make-i/o-invalid-position-error": '(make-i/o-invalid-position-error position)',
	\"make-i/o-port-error": '(make-i/o-port-error pobj)',
	\"make-i/o-read-error)": '(make-i/o-read-error)',
	\"make-i/o-write-error)": '(make-i/o-write-error)',
	\"make-implementation-restriction-violation)": '(make-implementation-restriction-violation)',
	\"make-input-port": '(make-input-port handler input-buffer)',
	\"make-input/output-port": '(make-input/output-port handler input-buffer output-buffer)',
	\"make-irritants-condition": '(make-irritants-condition irritants)',
	\"make-lexical-violation)": '(make-lexical-violation)',
	\"make-list": '(make-list n) (make-list n obj)',
	\"make-message-condition": '(make-message-condition message)',
	\"make-mutex": '(make-mutex name)',
	\"make-mutex)": '(make-mutex)',
	\"make-no-infinities-violation)": '(make-no-infinities-violation)',
	\"make-no-nans-violation)": '(make-no-nans-violation)',
	\"make-non-continuable-violation)": '(make-non-continuable-violation)',
	\"make-object-finder": '(make-object-finder pred) (make-object-finder pred g) (make-object-finder pred x g)',
	\"make-output-port": '(make-output-port handler output-buffer)',
	\"make-parameter": '(make-parameter object) (make-parameter object procedure)',
	\"make-polar": '(make-polar real1 real2)',
	\"make-record-constructor-descriptor": '(make-record-constructor-descriptor rtd parent-rcd protocol)',
	\"make-record-type": '(make-record-type type-name fields) (make-record-type parent-rtd type-name fields)',
	\"make-record-type-descriptor": '(make-record-type-descriptor name parent uid s? o? fields)',
	\"make-rectangular": '(make-rectangular real1 real2)',
	\"make-serious-condition)": '(make-serious-condition)',
	\"make-source-condition": '(make-source-condition form)',
	\"make-source-file-descriptor": '(make-source-file-descriptor string binary-input-port) (make-source-file-descriptor string binary-input-port reset?)',
	\"make-source-object": '(make-source-object sfd bfp efp) (make-source-object sfd bfp efp line column)',
	\"make-source-table)": '(make-source-table)',
	\"make-sstats": '(make-sstats cpu real bytes gc-count gc-cpu gc-real gc-bytes)',
	\"make-string": '(make-string n) (make-string n char)',
	\"make-syntax-violation": '(make-syntax-violation form subform)',
	\"make-thread-parameter": '(make-thread-parameter object) (make-thread-parameter object procedure)',
	\"make-time": '(make-time type nsec sec)',
	\"make-transcoder": '(make-transcoder codec) (make-transcoder codec eol-style) (make-transcoder codec eol-style error-handling-mode)',
	\"make-undefined-violation)": '(make-undefined-violation)',
	\"make-variable-transformer": '(make-variable-transformer procedure)',
	\"make-vector": '(make-vector n) (make-vector n obj)',
	\"make-violation)": '(make-violation)',
	\"make-warning)": '(make-warning)',
	\"make-weak-eq-hashtable": '(make-weak-eq-hashtable size)',
	\"make-weak-eq-hashtable)": '(make-weak-eq-hashtable)',
	\"make-weak-eqv-hashtable": '(make-weak-eqv-hashtable size)',
	\"make-weak-eqv-hashtable)": '(make-weak-eqv-hashtable)',
	\"make-who-condition": '(make-who-condition who)',
	\"map": '(map procedure list1 list2 ...)',
	\"mark-port-closed!": '(mark-port-closed! port)',
	\"max": '(max real1 real2 ...)',
	\"maximum-memory-bytes)": '(maximum-memory-bytes)',
	\"maybe-compile-file": '(maybe-compile-file input-filename) (maybe-compile-file input-filename output-filename)',
	\"maybe-compile-library": '(maybe-compile-library input-filename) (maybe-compile-library input-filename output-filename)',
	\"maybe-compile-program": '(maybe-compile-program input-filename) (maybe-compile-program input-filename output-filename)',
	\"member": '(member obj list)',
	\"memp": '(memp procedure list)',
	\"memq": '(memq obj list)',
	\"memv": '(memv obj list)',
	\"merge": '(merge predicate list1 list2)',
	\"merge!": '(merge! predicate list1 list2)',
	\"message-condition?": '(message-condition? obj)',
	\"meta": '(meta . definition)',
	\"meta-cond": '(meta-cond clause1 clause2 ...)',
	\"min": '(min real1 real2 ...)',
	\"mkdir": '(mkdir path) (mkdir path mode)',
	\"mod": '(mod x1 x2)',
	\"mod0": '(mod0 x1 x2)',
	\"module": '(module interface defn ... init ...) (module name interface defn ... init ...)',
	\"modulo": '(modulo int1 int2)',
	\"most-negative-fixnum)": '(most-negative-fixnum)',
	\"most-positive-fixnum)": '(most-positive-fixnum)',
	\"multibyte->string": '(multibyte->string code-page bytevector)',
	\"mutable": 'syntax',
	\"mutable-box?": '(mutable-box? obj)',
	\"mutable-bytevector?": '(mutable-bytevector? obj)',
	\"mutable-fxvector?": '(mutable-fxvector? obj)',
	\"mutable-string?": '(mutable-string? obj)',
	\"mutable-vector?": '(mutable-vector? obj)',
	\"mutex-acquire": '(mutex-acquire mutex) (mutex-acquire mutex block?)',
	\"mutex-name": '(mutex-name mutex)',
	\"mutex-release": '(mutex-release mutex)',
	\"mutex?": '(mutex? obj)',
	\"nan?": '(nan? real)',
	\"native-endianness)": '(native-endianness)',
	\"native-eol-style)": '(native-eol-style)',
	\"native-transcoder)": '(native-transcoder)',
	\"negative?": '(negative? real)',
	\"new-cafe": '(new-cafe eval-proc)',
	\"new-cafe)": '(new-cafe)',
	\"newline": '(newline textual-output-port)',
	\"newline)": '(newline)',
	\"no-infinities-violation?": '(no-infinities-violation? obj)',
	\"no-nans-violation?": '(no-nans-violation? obj)',
	\"non-continuable-violation?": '(non-continuable-violation? obj)',
	\"nongenerative": 'syntax',
	\"nonnegative?": '(nonnegative? real)',
	\"nonpositive?": '(nonpositive? real)',
	\"not": '(not obj)',
	\"null-environment": '(null-environment version)',
	\"null?": '(null? obj)',
	\"number->string": '(number->string num) (number->string num radix) (number->string num radix precision)',
	\"number?": '(number? obj)',
	\"numerator": '(numerator rat)',
	\"object-counts)": '(object-counts)',
	\"oblist)": '(oblist)',
	\"odd?": '(odd? int)',
	\"only": 'syntax',
	\"opaque": 'syntax',
	\"open-bytevector-input-port": '(open-bytevector-input-port bytevector) (open-bytevector-input-port bytevector ?transcoder)',
	\"open-bytevector-output-port": '(open-bytevector-output-port ?transcoder)',
	\"open-bytevector-output-port)": '(open-bytevector-output-port)',
	\"open-fd-input-port": '(open-fd-input-port fd) (open-fd-input-port fd b-mode) (open-fd-input-port fd b-mode ?transcoder)',
	\"open-fd-input/output-port": '(open-fd-input/output-port fd) (open-fd-input/output-port fd b-mode) (open-fd-input/output-port fd b-mode ?transcoder)',
	\"open-fd-output-port": '(open-fd-output-port fd) (open-fd-output-port fd b-mode) (open-fd-output-port fd b-mode ?transcoder)',
	\"open-file-input-port": '(open-file-input-port path) (open-file-input-port path options) (open-file-input-port path options b-mode) (open-file-input-port path options b-mode ?transcoder)',
	\"open-file-input/output-port": '(open-file-input/output-port path) (open-file-input/output-port path options) (open-file-input/output-port path options b-mode) (open-file-input/output-port path options b-mode ?transcoder)',
	\"open-file-output-port": '(open-file-output-port path) (open-file-output-port path options) (open-file-output-port path options b-mode) (open-file-output-port path options b-mode ?transcoder)',
	\"open-input-file": '(open-input-file path) (open-input-file path options)',
	\"open-input-output-file": '(open-input-output-file path) (open-input-output-file path options)',
	\"open-input-string": '(open-input-string string)',
	\"open-output-file": '(open-output-file path) (open-output-file path options)',
	\"open-output-string)": '(open-output-string)',
	\"open-process-ports": '(open-process-ports command) (open-process-ports command b-mode) (open-process-ports command b-mode ?transcoder)',
	\"open-source-file": '(open-source-file sfd)',
	\"open-string-input-port": '(open-string-input-port string)',
	\"open-string-output-port)": '(open-string-output-port)',
	\"optimize-level": 'thread param',
	\"or": '(or expr ...)',
	\"ormap": '(ormap procedure list1 list2 ...)',
	\"output-port-buffer-mode": '(output-port-buffer-mode port)',
	\"output-port?": '(output-port? obj)',
	\"pair?": '(pair? obj)',
	\"parameterize": '(parameterize ((param expr) ...) body1 body2 ...)',
	\"parent": 'syntax',
	\"parent-rtd": 'syntax',
	\"pariah": '(pariah expr1 expr2 ...)',
	\"partition": '(partition procedure list)',
	\"path-absolute?": '(path-absolute? path)',
	\"path-extension": '(path-extension path)',
	\"path-first": '(path-first path)',
	\"path-last": '(path-last path)',
	\"path-parent": '(path-parent path)',
	\"path-rest": '(path-rest path)',
	\"path-root": '(path-root path)',
	\"peek-char": '(peek-char textual-input-port)',
	\"peek-char)": '(peek-char)',
	\"petite?)": '(petite?)',
	\"port-bol?": '(port-bol? port)',
	\"port-closed?": '(port-closed? port)',
	\"port-eof?": '(port-eof? input-port)',
	\"port-file-compressed!": '(port-file-compressed! port)',
	\"port-file-descriptor": '(port-file-descriptor port)',
	\"port-handler": '(port-handler port)',
	\"port-has-port-length?": '(port-has-port-length? port)',
	\"port-has-port-nonblocking??": '(port-has-port-nonblocking?? port)',
	\"port-has-port-position?": '(port-has-port-position? port)',
	\"port-has-set-port-length!?": '(port-has-set-port-length!? port)',
	\"port-has-set-port-nonblocking!?": '(port-has-set-port-nonblocking!? port)',
	\"port-has-set-port-position!?": '(port-has-set-port-position!? port)',
	\"port-input-buffer": '(port-input-buffer input-port)',
	\"port-input-count": '(port-input-count input-port)',
	\"port-input-empty?": '(port-input-empty? input-port)',
	\"port-input-index": '(port-input-index input-port)',
	\"port-input-size": '(port-input-size input-port)',
	\"port-length": '(port-length port)',
	\"port-name": '(port-name port)',
	\"port-nonblocking?": '(port-nonblocking? port)',
	\"port-output-buffer": '(port-output-buffer output-port)',
	\"port-output-count": '(port-output-count output-port)',
	\"port-output-full?": '(port-output-full? output-port)',
	\"port-output-index": '(port-output-index output-port)',
	\"port-output-size": '(port-output-size output-port)',
	\"port-position": '(port-position port)',
	\"port-transcoder": '(port-transcoder port)',
	\"port?": '(port? obj)',
	\"positive?": '(positive? real)',
	\"predicate": 'syntax',
	\"prefix": 'syntax',
	\"pretty-file": '(pretty-file ifn ofn)',
	\"pretty-format": '(pretty-format sym) (pretty-format sym fmt)',
	\"pretty-initial-indent": 'thread param',
	\"pretty-line-length": 'thread param',
	\"pretty-maximum-lines": 'thread param',
	\"pretty-one-line-limit": 'thread param',
	\"pretty-print": '(pretty-print obj) (pretty-print obj textual-output-port)',
	\"pretty-standard-indent": 'thread param',
	\"print-brackets": 'thread param',
	\"print-char-name": 'thread param',
	\"print-extended-identifiers": 'thread param',
	\"print-gensym": 'thread param',
	\"print-graph": 'thread param',
	\"print-length": 'thread param',
	\"print-level": 'thread param',
	\"print-precision": 'thread param',
	\"print-radix": 'thread param',
	\"print-record": 'thread param',
	\"print-unicode": 'thread param',
	\"print-vector-length": 'thread param',
	\"printf": '(printf format-string obj ...)',
	\"procedure-arity-mask": '(procedure-arity-mask proc)',
	\"procedure?": '(procedure? obj)',
	\"process": '(process command)',
	\"profile": '(profile source-object)',
	\"profile-clear)": '(profile-clear)',
	\"profile-clear-database)": '(profile-clear-database)',
	\"profile-dump)": '(profile-dump)',
	\"profile-dump-data": '(profile-dump-data path) (profile-dump-data path dump)',
	\"profile-dump-html": '(profile-dump-html prefix) (profile-dump-html prefix dump)',
	\"profile-dump-html)": '(profile-dump-html)',
	\"profile-dump-list": '(profile-dump-list warn?) (profile-dump-list warn? dump)',
	\"profile-dump-list)": '(profile-dump-list)',
	\"profile-line-number-color)": '(profile-line-number-color)',
	\"profile-load-data": '(profile-load-data path ...)',
	\"profile-palette)": '(profile-palette)',
	\"profile-query-weight": '(profile-query-weight obj)',
	\"profile-release-counters)": '(profile-release-counters)',
	\"property-list": '(property-list symbol)',
	\"protocol": 'syntax',
	\"put-bytevector": '(put-bytevector binary-output-port bytevector) (put-bytevector binary-output-port bytevector start) (put-bytevector binary-output-port bytevector start n)',
	\"put-bytevector-some": '(put-bytevector-some binary-output-port bytevector) (put-bytevector-some binary-output-port bytevector start) (put-bytevector-some binary-output-port bytevector start n)',
	\"put-char": '(put-char textual-output-port char)',
	\"put-datum": '(put-datum textual-output-port obj)',
	\"put-hash-table!": '(put-hash-table! ht k v)',
	\"put-registry!": '(put-registry! key val)',
	\"put-source-table": '(put-source-table textual-output-port source-table)',
	\"put-string": '(put-string textual-output-port string) (put-string textual-output-port string start) (put-string textual-output-port string start n)',
	\"put-string-some": '(put-string-some textual-output-port string) (put-string-some textual-output-port string start) (put-string-some textual-output-port string start n)',
	\"put-u8": '(put-u8 binary-output-port octet)',
	\"putenv": '(putenv key value)',
	\"putprop": '(putprop symbol key value)',
	\"quasiquote": '(quasiquote obj ...)',
	\"quasisyntax": '(quasisyntax template ...)',
	\"quote": '(quote obj)',
	\"quotient": '(quotient int1 int2)',
	\"r5rs": 'module',
	\"r5rs-syntax": 'module',
	\"raise": '(raise obj)',
	\"raise-continuable": '(raise-continuable obj)',
	\"random": '(random real)',
	\"random-seed": 'thread param',
	\"rational-valued?": '(rational-valued? obj)',
	\"rational?": '(rational? obj)',
	\"rationalize": '(rationalize real1 real2)',
	\"ratnum?": '(ratnum? obj)',
	\"read": '(read textual-input-port)',
	\"read)": '(read)',
	\"read-char": '(read-char textual-input-port)',
	\"read-char)": '(read-char)',
	\"read-token": '(read-token textual-input-port) (read-token textual-input-port sfd bfp)',
	\"read-token)": '(read-token)',
	\"real->flonum": '(real->flonum real)',
	\"real-part": '(real-part num)',
	\"real-time)": '(real-time)',
	\"real-valued?": '(real-valued? obj)',
	\"real?": '(real? obj)',
	\"rec": '(rec var expr)',
	\"record-accessor": '(record-accessor rtd idx)',
	\"record-case": '(record-case expr clause1 clause2 ...)',
	\"record-constructor": '(record-constructor rcd) (record-constructor rtd) (record-constructor rcd)',
	\"record-constructor-descriptor": '(record-constructor-descriptor record-name)',
	\"record-constructor-descriptor?": '(record-constructor-descriptor? obj)',
	\"record-equal-procedure": '(record-equal-procedure record1 record2)',
	\"record-field-accessible?": '(record-field-accessible? rtd field-id)',
	\"record-field-accessor": '(record-field-accessor rtd field-id)',
	\"record-field-mutable?": '(record-field-mutable? rtd idx) (record-field-mutable? rtd field-id)',
	\"record-field-mutator": '(record-field-mutator rtd field-id)',
	\"record-hash-procedure": '(record-hash-procedure record)',
	\"record-mutator": '(record-mutator rtd idx)',
	\"record-predicate": '(record-predicate rtd)',
	\"record-reader": '(record-reader rtd) (record-reader name) (record-reader rtd #f) (record-reader name #f) (record-reader name rtd)',
	\"record-rtd": '(record-rtd record)',
	\"record-type-descriptor": '(record-type-descriptor rec) (record-type-descriptor record-name)',
	\"record-type-descriptor?": '(record-type-descriptor? obj)',
	\"record-type-equal-procedure": '(record-type-equal-procedure rtd) (record-type-equal-procedure rtd equal-proc)',
	\"record-type-field-decls": '(record-type-field-decls rtd)',
	\"record-type-field-names": '(record-type-field-names rtd)',
	\"record-type-generative?": '(record-type-generative? rtd)',
	\"record-type-hash-procedure": '(record-type-hash-procedure rtd) (record-type-hash-procedure rtd hash-proc)',
	\"record-type-name": '(record-type-name rtd)',
	\"record-type-opaque?": '(record-type-opaque? rtd)',
	\"record-type-parent": '(record-type-parent rtd)',
	\"record-type-sealed?": '(record-type-sealed? rtd)',
	\"record-type-symbol": '(record-type-symbol rtd)',
	\"record-type-uid": '(record-type-uid rtd)',
	\"record-writer": '(record-writer rtd) (record-writer rtd procedure)',
	\"record?": '(record? obj) (record? obj rtd)',
	\"register-signal-handler": '(register-signal-handler sig procedure)',
	\"release-minimum-generation": 'global param',
	\"remainder": '(remainder int1 int2)',
	\"remove": '(remove obj list)',
	\"remove!": '(remove! obj list)',
	\"remove-foreign-entry": '(remove-foreign-entry entry-name)',
	\"remove-hash-table!": '(remove-hash-table! ht k)',
	\"remove-registry!": '(remove-registry! key)',
	\"remp": '(remp procedure list)',
	\"remprop": '(remprop symbol key)',
	\"remq": '(remq obj list)',
	\"remq!": '(remq! obj list)',
	\"remv": '(remv obj list)',
	\"remv!": '(remv! obj list)',
	\"rename": 'syntax',
	\"rename-file": '(rename-file old-pathname new-pathname)',
	\"require-nongenerative-clause": 'thread param',
	\"reset)": '(reset)',
	\"reset-cost-center!": '(reset-cost-center! cost-center)',
	\"reset-handler": 'thread param',
	\"reset-maximum-memory-bytes!)": '(reset-maximum-memory-bytes!)',
	\"reverse": '(reverse list)',
	\"reverse!": '(reverse! list)',
	\"revisit": '(revisit path)',
	\"revisit-compiled-from-port": '(revisit-compiled-from-port input-port)',
	\"round": '(round real)',
	\"run-cp0": 'thread param',
	\"s8-list->bytevector": '(s8-list->bytevector list)',
	\"sc-expand": '(sc-expand obj) (sc-expand obj env)',
	\"scheme": 'module',
	\"scheme-environment)": '(scheme-environment)',
	\"scheme-program": 'global param',
	\"scheme-report-environment": '(scheme-report-environment version)',
	\"scheme-script": 'global param',
	\"scheme-start": 'global param',
	\"scheme-version)": '(scheme-version)',
	\"scheme-version-number)": '(scheme-version-number)',
	\"sealed": 'syntax',
	\"serious-condition?": '(serious-condition? obj)',
	\"set!": '(set! var expr)',
	\"set-binary-port-input-buffer!": '(set-binary-port-input-buffer! binary-input-port bytevector)',
	\"set-binary-port-input-index!": '(set-binary-port-input-index! binary-input-port n)',
	\"set-binary-port-input-size!": '(set-binary-port-input-size! binary-input-port n)',
	\"set-binary-port-output-buffer!": '(set-binary-port-output-buffer! binary-output-port bytevector)',
	\"set-binary-port-output-index!": '(set-binary-port-output-index! output-port n)',
	\"set-binary-port-output-size!": '(set-binary-port-output-size! output-port n)',
	\"set-box!": '(set-box! box obj)',
	\"set-car!": '(set-car! pair obj)',
	\"set-cdr!": '(set-cdr! pair obj)',
	\"set-port-bol!": '(set-port-bol! output-port obj)',
	\"set-port-eof!": '(set-port-eof! input-port obj)',
	\"set-port-input-buffer!": '(set-port-input-buffer! input-port x)',
	\"set-port-input-index!": '(set-port-input-index! input-port n)',
	\"set-port-input-size!": '(set-port-input-size! input-port n)',
	\"set-port-length!": '(set-port-length! port len)',
	\"set-port-name!": '(set-port-name! port obj)',
	\"set-port-nonblocking!": '(set-port-nonblocking! port obj)',
	\"set-port-output-buffer!": '(set-port-output-buffer! output-port x)',
	\"set-port-output-index!": '(set-port-output-index! output-port n)',
	\"set-port-output-size!": '(set-port-output-size! output-port n)',
	\"set-port-position!": '(set-port-position! port pos)',
	\"set-sstats-bytes!": '(set-sstats-bytes! s new-value)',
	\"set-sstats-cpu!": '(set-sstats-cpu! s new-value)',
	\"set-sstats-gc-bytes!": '(set-sstats-gc-bytes! s new-value)',
	\"set-sstats-gc-count!": '(set-sstats-gc-count! s new-value)',
	\"set-sstats-gc-cpu!": '(set-sstats-gc-cpu! s new-value)',
	\"set-sstats-gc-real!": '(set-sstats-gc-real! s new-value)',
	\"set-sstats-real!": '(set-sstats-real! s new-value)',
	\"set-textual-port-input-buffer!": '(set-textual-port-input-buffer! textual-input-port string)',
	\"set-textual-port-input-index!": '(set-textual-port-input-index! textual-input-port n)',
	\"set-textual-port-input-size!": '(set-textual-port-input-size! textual-input-port n)',
	\"set-textual-port-output-buffer!": '(set-textual-port-output-buffer! textual-output-port string)',
	\"set-textual-port-output-index!": '(set-textual-port-output-index! textual-output-port n)',
	\"set-textual-port-output-size!": '(set-textual-port-output-size! textual-output-port n)',
	\"set-time-nanosecond!": '(set-time-nanosecond! time nsec)',
	\"set-time-second!": '(set-time-second! time sec)',
	\"set-time-type!": '(set-time-type! time type)',
	\"set-timer": '(set-timer n)',
	\"set-top-level-value!": '(set-top-level-value! symbol obj) (set-top-level-value! symbol obj env)',
	\"set-virtual-register!": '(set-virtual-register! k x)',
	\"simple-conditions": '(simple-conditions condition)',
	\"sin": '(sin num)',
	\"sinh": '(sinh num)',
	\"sint-list->bytevector": '(sint-list->bytevector list eness size)',
	\"sleep": '(sleep time)',
	\"sort": '(sort predicate list)',
	\"sort!": '(sort! predicate list)',
	\"source-condition-form": '(source-condition-form condition)',
	\"source-condition?": '(source-condition? obj)',
	\"source-directories": 'global param',
	\"source-file-descriptor": '(source-file-descriptor path checksum)',
	\"source-file-descriptor-checksum": '(source-file-descriptor-checksum sfd)',
	\"source-file-descriptor-path": '(source-file-descriptor-path sfd)',
	\"source-file-descriptor?": '(source-file-descriptor? obj)',
	\"source-object-bfp": '(source-object-bfp source-object)',
	\"source-object-column": '(source-object-column source-object)',
	\"source-object-efp": '(source-object-efp source-object)',
	\"source-object-line": '(source-object-line source-object)',
	\"source-object-sfd": '(source-object-sfd source-object)',
	\"source-object?": '(source-object? obj)',
	\"source-table-cell": '(source-table-cell source-table source-object default)',
	\"source-table-contains?": '(source-table-contains? source-table source-object)',
	\"source-table-delete!": '(source-table-delete! source-table source-object)',
	\"source-table-dump": '(source-table-dump source-table)',
	\"source-table-ref": '(source-table-ref source-table source-object default)',
	\"source-table-set!": '(source-table-set! source-table source-object obj)',
	\"source-table-size": '(source-table-size source-table)',
	\"source-table?": '(source-table? obj)',
	\"sqrt": '(sqrt num)',
	\"sstats-bytes": '(sstats-bytes s)',
	\"sstats-cpu": '(sstats-cpu s)',
	\"sstats-difference": '(sstats-difference s1 s2)',
	\"sstats-gc-bytes": '(sstats-gc-bytes s)',
	\"sstats-gc-count": '(sstats-gc-count s)',
	\"sstats-gc-cpu": '(sstats-gc-cpu s)',
	\"sstats-gc-real": '(sstats-gc-real s)',
	\"sstats-print": '(sstats-print s) (sstats-print s textual-output-port)',
	\"sstats-real": '(sstats-real s)',
	\"sstats?": '(sstats? obj)',
	\"standard-error-port": '(standard-error-port b-mode) (standard-error-port b-mode ?transcoder)',
	\"standard-error-port)": '(standard-error-port)',
	\"standard-input-port": '(standard-input-port b-mode) (standard-input-port b-mode ?transcoder)',
	\"standard-input-port)": '(standard-input-port)',
	\"standard-output-port": '(standard-output-port b-mode) (standard-output-port b-mode ?transcoder)',
	\"standard-output-port)": '(standard-output-port)',
	\"statistics)": '(statistics)',
	\"string": '(string char ...)',
	\"string->bytevector": '(string->bytevector string transcoder)',
	\"string->immutable-string": '(string->immutable-string string)',
	\"string->list": '(string->list string)',
	\"string->multibyte": '(string->multibyte code-page string)',
	\"string->number": '(string->number string) (string->number string radix)',
	\"string->symbol": '(string->symbol string)',
	\"string->utf16": '(string->utf16 string) (string->utf16 string endianness)',
	\"string->utf32": '(string->utf32 string) (string->utf32 string endianness)',
	\"string->utf8": '(string->utf8 string)',
	\"string-append": '(string-append string ...)',
	\"string-ci-hash": '(string-ci-hash string)',
	\"string-ci<=?": '(string-ci<=? string1 string2 string3 ...)',
	\"string-ci<?": '(string-ci<? string1 string2 string3 ...)',
	\"string-ci=?": '(string-ci=? string1 string2 string3 ...)',
	\"string-ci>=?": '(string-ci>=? string1 string2 string3 ...)',
	\"string-ci>?": '(string-ci>? string1 string2 string3 ...)',
	\"string-copy": '(string-copy string)',
	\"string-copy!": '(string-copy! src src-start dst dst-start n)',
	\"string-downcase": '(string-downcase string)',
	\"string-fill!": '(string-fill! string char)',
	\"string-foldcase": '(string-foldcase string)',
	\"string-for-each": '(string-for-each procedure string1 string2 ...)',
	\"string-hash": '(string-hash string)',
	\"string-length": '(string-length string)',
	\"string-normalize-nfc": '(string-normalize-nfc string)',
	\"string-normalize-nfd": '(string-normalize-nfd string)',
	\"string-normalize-nfkc": '(string-normalize-nfkc string)',
	\"string-normalize-nfkd": '(string-normalize-nfkd string)',
	\"string-ref": '(string-ref string n)',
	\"string-set!": '(string-set! string n char)',
	\"string-titlecase": '(string-titlecase string)',
	\"string-truncate!": '(string-truncate! string n)',
	\"string-upcase": '(string-upcase string)',
	\"string<=?": '(string<=? string1 string2 string3 ...)',
	\"string<?": '(string<? string1 string2 string3 ...)',
	\"string=?": '(string=? string1 string2 string3 ...)',
	\"string>=?": '(string>=? string1 string2 string3 ...)',
	\"string>?": '(string>? string1 string2 string3 ...)',
	\"string?": '(string? obj)',
	\"strip-fasl-file": '(strip-fasl-file input-path output-path options)',
	\"sub1": '(sub1 num)',
	\"subset-mode": 'thread param',
	\"subst": '(subst new old tree)',
	\"subst!": '(subst! new old tree)',
	\"substq": '(substq new old tree)',
	\"substq!": '(substq! new old tree)',
	\"substring": '(substring string start end)',
	\"substring-fill!": '(substring-fill! string start end char)',
	\"substv": '(substv new old tree)',
	\"substv!": '(substv! new old tree)',
	\"subtract-duration": '(subtract-duration time timed)',
	\"subtract-duration!": '(subtract-duration! time timed)',
	\"suppress-greeting": 'global param',
	\"symbol->string": '(symbol->string symbol)',
	\"symbol-hash": '(symbol-hash symbol)',
	\"symbol-hashtable-cell": '(symbol-hashtable-cell hashtable key default)',
	\"symbol-hashtable-contains?": '(symbol-hashtable-contains? hashtable key)',
	\"symbol-hashtable-delete!": '(symbol-hashtable-delete! hashtable key)',
	\"symbol-hashtable-ref": '(symbol-hashtable-ref hashtable key default)',
	\"symbol-hashtable-set!": '(symbol-hashtable-set! hashtable key value)',
	\"symbol-hashtable-update!": '(symbol-hashtable-update! hashtable key procedure default)',
	\"symbol-hashtable?": '(symbol-hashtable? obj)',
	\"symbol=?": '(symbol=? symbol1 symbol2)',
	\"symbol?": '(symbol? obj)',
	\"syntax": '(syntax template)',
	\"syntax->annotation": '(syntax->annotation obj)',
	\"syntax->datum": '(syntax->datum obj)',
	\"syntax->list": '(syntax->list syntax-object)',
	\"syntax->vector": '(syntax->vector syntax-object)',
	\"syntax-case": '(syntax-case expr (literal ...) clause ...)',
	\"syntax-error": '(syntax-error obj string ...)',
	\"syntax-object->datum": '(syntax-object->datum obj)',
	\"syntax-rules": '(syntax-rules (literal ...) clause ...)',
	\"syntax-violation": '(syntax-violation who msg form) (syntax-violation who msg form subform)',
	\"syntax-violation-form": '(syntax-violation-form condition)',
	\"syntax-violation-subform": '(syntax-violation-subform condition)',
	\"syntax-violation?": '(syntax-violation? obj)',
	\"system": '(system command)',
	\"tan": '(tan num)',
	\"tanh": '(tanh num)',
	\"textual-port-input-buffer": '(textual-port-input-buffer textual-input-port)',
	\"textual-port-input-count": '(textual-port-input-count textual-input-port)',
	\"textual-port-input-index": '(textual-port-input-index textual-input-port)',
	\"textual-port-input-size": '(textual-port-input-size textual-input-port)',
	\"textual-port-output-buffer": '(textual-port-output-buffer output-port)',
	\"textual-port-output-count": '(textual-port-output-count textual-output-port)',
	\"textual-port-output-index": '(textual-port-output-index output-port)',
	\"textual-port-output-size": '(textual-port-output-size output-port)',
	\"textual-port?": '(textual-port? obj)',
	\"thread-condition?": '(thread-condition? obj)',
	\"thread?": '(thread? obj)',
	\"threaded?)": '(threaded?)',
	\"time": '(time expr)',
	\"time-difference": '(time-difference time1 time2)',
	\"time-difference!": '(time-difference! time1 time2)',
	\"time-nanosecond": '(time-nanosecond time)',
	\"time-second": '(time-second time)',
	\"time-type": '(time-type time)',
	\"time-utc->date": '(time-utc->date time) (time-utc->date time offset)',
	\"time<=?": '(time<=? time1 time2)',
	\"time<?": '(time<? time1 time2)',
	\"time=?": '(time=? time1 time2)',
	\"time>=?": '(time>=? time1 time2)',
	\"time>?": '(time>? time1 time2)',
	\"time?": '(time? obj)',
	\"timer-interrupt-handler": 'thread param',
	\"top-level-bound?": '(top-level-bound? symbol) (top-level-bound? symbol env)',
	\"top-level-mutable?": '(top-level-mutable? symbol) (top-level-mutable? symbol env)',
	\"top-level-program": '(top-level-program imports body)',
	\"top-level-syntax": '(top-level-syntax symbol) (top-level-syntax symbol env)',
	\"top-level-syntax?": '(top-level-syntax? symbol) (top-level-syntax? symbol env)',
	\"top-level-value": '(top-level-value symbol) (top-level-value symbol env)',
	\"trace": '(trace var1 var2 ...)',
	\"trace)": '(trace)',
	\"trace-case-lambda": '(trace-case-lambda name clause ...)',
	\"trace-define": '(trace-define var expr) (trace-define (var . idspec) body1 body2 ...)',
	\"trace-define-syntax": '(trace-define-syntax keyword expr)',
	\"trace-do": '(trace-do ((var init update) ...) (test result ...) expr ...)',
	\"trace-lambda": '(trace-lambda name formals body1 body2 ...)',
	\"trace-let": '(trace-let name ((var expr) ...) body1 body2 ...)',
	\"trace-output-port": 'thread param',
	\"trace-print": 'thread param',
	\"transcoded-port": '(transcoded-port binary-port transcoder)',
	\"transcoder-codec": '(transcoder-codec transcoder)',
	\"transcoder-eol-style": '(transcoder-eol-style transcoder)',
	\"transcoder-error-handling-mode": '(transcoder-error-handling-mode transcoder)',
	\"transcoder?": '(transcoder? obj)',
	\"transcript-cafe": '(transcript-cafe path)',
	\"transcript-off)": '(transcript-off)',
	\"transcript-on": '(transcript-on path)',
	\"truncate": '(truncate real)',
	\"truncate-file": '(truncate-file output-port) (truncate-file output-port pos)',
	\"truncate-port": '(truncate-port output-port) (truncate-port output-port pos)',
	\"type-descriptor": '(type-descriptor name)',
	\"u8-list->bytevector": '(u8-list->bytevector list)',
	\"uint-list->bytevector": '(uint-list->bytevector list eness size)',
	\"unbox": '(unbox box)',
	\"undefined-variable-warnings": 'thread param',
	\"undefined-violation?": '(undefined-violation? obj)',
	\"unget-char": '(unget-char textual-input-port char)',
	\"unget-u8": '(unget-u8 binary-input-port octet)',
	\"unless": '(unless test-expr expr1 expr2 ...)',
	\"unlock-object": '(unlock-object obj)',
	\"unquote": '(unquote obj ...)',
	\"unquote-splicing": '(unquote-splicing obj ...)',
	\"unread-char": '(unread-char char) (unread-char char textual-input-port)',
	\"unregister-guardian": '(unregister-guardian guardian)',
	\"unsyntax": '(unsyntax template ...)',
	\"unsyntax-splicing": '(unsyntax-splicing template ...)',
	\"untrace": '(untrace var1 var2 ...)',
	\"untrace)": '(untrace)',
	\"utf-16-codec": '(utf-16-codec endianness)',
	\"utf-16-codec)": '(utf-16-codec)',
	\"utf-16be-codec)": '(utf-16be-codec)',
	\"utf-16le-codec)": '(utf-16le-codec)',
	\"utf-8-codec)": '(utf-8-codec)',
	\"utf16->string": '(utf16->string bytevector endianness) (utf16->string bytevector endianness endianness-mandatory?)',
	\"utf32->string": '(utf32->string bytevector endianness) (utf32->string bytevector endianness endianness-mandatory?)',
	\"utf8->string": '(utf8->string bytevector)',
	\"values": '(values obj ...)',
	\"variable": 'syntax',
	\"vector": '(vector obj ...)',
	\"vector->immutable-vector": '(vector->immutable-vector vector)',
	\"vector->list": '(vector->list vector)',
	\"vector-cas!": '(vector-cas! vector n old-obj new-obj)',
	\"vector-copy": '(vector-copy vector)',
	\"vector-fill!": '(vector-fill! vector obj)',
	\"vector-for-each": '(vector-for-each procedure vector1 vector2 ...)',
	\"vector-length": '(vector-length vector)',
	\"vector-map": '(vector-map procedure vector1 vector1 ...)',
	\"vector-ref": '(vector-ref vector n)',
	\"vector-set!": '(vector-set! vector n obj)',
	\"vector-set-fixnum!": '(vector-set-fixnum! vector n fixnum)',
	\"vector-sort": '(vector-sort predicate vector)',
	\"vector-sort!": '(vector-sort! predicate vector)',
	\"vector?": '(vector? obj)',
	\"verify-loadability": '(verify-loadability situation input ...)',
	\"violation?": '(violation? obj)',
	\"virtual-register": '(virtual-register k)',
	\"virtual-register-count)": '(virtual-register-count)',
	\"visit": '(visit path)',
	\"visit-compiled-from-port": '(visit-compiled-from-port input-port)',
	\"void)": '(void)',
	\"waiter-prompt-and-read": 'thread param',
	\"waiter-prompt-string": 'thread param',
	\"waiter-write": 'thread param',
	\"warning": '(warning who msg irritant ...)',
	\"warning?": '(warning? obj)',
	\"warningf": '(warningf who msg irritant ...)',
	\"weak-cons": '(weak-cons obj1 obj2)',
	\"weak-pair?": '(weak-pair? obj)',
	\"when": '(when test-expr expr1 expr2 ...)',
	\"who-condition?": '(who-condition? obj)',
	\"with": '(with ((pat expr) ...) template)',
	\"with-cost-center": '(with-cost-center cost-center thunk) (with-cost-center timed? cost-center thunk)',
	\"with-exception-handler": '(with-exception-handler procedure thunk)',
	\"with-implicit": '(with-implicit (id0 id1 ...) body1 body2 ...)',
	\"with-input-from-file": '(with-input-from-file path thunk) (with-input-from-file path thunk options)',
	\"with-input-from-string": '(with-input-from-string string thunk)',
	\"with-interrupts-disabled": '(with-interrupts-disabled body1 body2 ...)',
	\"with-mutex": '(with-mutex mutex body1 body2 ...)',
	\"with-output-to-file": '(with-output-to-file path thunk) (with-output-to-file path thunk options)',
	\"with-output-to-string": '(with-output-to-string thunk)',
	\"with-profile-tracker": '(with-profile-tracker thunk) (with-profile-tracker preserve-existing? thunk)',
	\"with-source-path": '(with-source-path who name procedure)',
	\"with-syntax": '(with-syntax ((pattern expr) ...) body1 body2 ...)',
	\"write": '(write obj) (write obj textual-output-port)',
	\"write-char": '(write-char char) (write-char char textual-output-port)',
	\"zero?": '(zero? num)',
	\}
